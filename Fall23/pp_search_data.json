[{"url":"Expl_installation/","title":"Software Installation","tags":["welcome"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 2 title \"Software Installation\" layout \"layout.jlhtml\" tags \"welcome\" description \"\" using Markdown using InteractiveUtils using PlutoUI md\"\"\" Installation von Julia und Pluto correct \"Lizenzen\" Julia ist vollst√§ndig Open Source, also kostenlos. Anders als bei Matlab Maple m√ºsst ihr nichts kaufen oder eine VPN Verbindung nutzen. Installieren von Julia Wir werden juliaup https github.com JuliaLang juliaup zum installieren von Julia verwenden. Dazu geh in das Terminal deines Rechners und gebe je nach Betriebssystem einen der folgenden commands ein copy pasten ist einfacher . Linux oder macOS ```bash curl fsSL https install.julialang.org | sh ``` Windows Installiere Julia √ºber den Windows store https www.microsoft.com store apps 9NJNWW8PVKMN oder copy paste ```bash winget install julia s msstore ``` in dein Terminal. \"\"\" md\"\"\" correct \"Tipp\" Falls du mit dem Terminal √ºberfordert bist kannst du auch auf den klassischen, grafischen Weg Julia installieren https julialang.org downloads . Falls gar nichts mehr geht, schaut euch dieses Video von Fons https www.youtube.com embed OOjKEgbt8AI an ersten 4 Minuten . üòÉ \"\"\" md\"\"\" Starten von Julia \"\"\" md\"\"\" Wenn alles geklappt hat, k√∂nnt ihr einfach mit dem Terminal Befehl ```bash julia ``` Julia starten. Alternativ k√∂nnt ihr auf die Desktopverkn√ºpfung klicken. Testet ob 1 1 tats√§chlich 2 ist. Das ausf√ºhren der Zeile erfolgt mit `Enter`. \"\"\" PlutoUI.Resource \"https i.imgur.com IlD8CWL.png\" md\"\"\" Installieren von Pluto \"\"\" md\"\"\" Julia hat einen integrierten Package Manager . Ihr gelangt in den Package Manager Modus indem ihr eine eckige Klammer in das Julia Terminal schreibt ```julia julia v.1.9 pkg ``` Dort angelangt installieren wir Pluto mit dem Befehl nur `add Pluto` ```julia v.1.9 pkg add Pluto ``` Dies kann durchaus einige Minuten in Anspruch nehmen. Habt Geduld ‚òïÔ∏è. Anschlie√üend gehen wir zur√ºck in den normalen Julia Modus durch L√∂schen des `pkg` Symbols. \"\"\" md\"\"\" Nun tippe ```julia julia using Pluto julia Pluto.run ``` um Pluto zu laden und anschlie√üend zu √∂ffnen. Zusammenfassung bei mir ist Pluto bereits installiert weshalb dort no changes steht \"\"\" PlutoUI.Resource \"https i.imgur.com fe9kGv0.png\" md\"\"\" hint \"Gratulation\" Herzlichen Gl√ºckwunsch, ihr habt den schwierigsten Part dieser Veranstaltung gemeistert. üçπ \"\"\" md\"\"\" Was ist Pluto? \"\"\" md\"\"\" Ganz prinzipiell k√∂nnten wir Julia komplett im Terminal schreiben. Blo√ü ist das nat√ºrlich extrem un√ºbersichtlich und wenig komfortabel. Aus diesen Grund ben√∂tigen wir eine leichte Programmierumgebung f√ºr Julia. Anders als in Maple oder Matlab haben wir die freie Hand was wir w√§hlen. Es k√∂nnte ein einfacher Texteditor sein oder eine gr√∂√üere Oberfl√§che wie z.B. VSCode. F√ºr diesen Kurs gen√ºgt uns Pluto und damit dein Browser üôÇ \"\"\" md\"\"\" √ñffnen von Pluto \"\"\" md\"\"\" Zun√§chst √∂ffne Julia mittels Terminalbefehl `julia` oder durch deine Desktopverkn√ºpfung. Anschlie√üend k√∂nnen wir immer Pluto starten durch \"\"\" md\"\"\" ```julia julia using Pluto julia Pluto.run ``` \"\"\" md\"\"\" Nun sollte sich dein Standardbrowser √∂ffnen und du gelangst in einen Men√º, bei dem du entweder ein neues Plutonotebook erzeugen kannst oder ein bereits existierendes √∂ffnest. \"\"\" md\"\"\" √ñffnen von Aufgabenbl√§ttern Vorlesungen \"\"\" md\"\"\" Zun√§chst suche dir dein Aufgabenblatt bzw. die Vorlesung aus, an der du gerne t√ºfteln m√∂chtest. Nun klicke oben rechts auf Edit or run this notebook . Anschlie√üend kopiere den Link \"\"\" PlutoUI.Resource \"https i.imgur.com cVyD98C.png\" md\"\"\" Nun k√∂nnen wir in der gestarteten Plutoumgebung in der Fl√§che Open a notebook den Link einf√ºgen und folgend `Enter` dr√ºcken. \"\"\" PlutoUI.Resource \"https i.imgur.com h3bykSO.png\" md\"\"\" Jetzt √∂ffnet sich das Notebook und wird ausgef√ºhrt, beim allerersten Mal kann das ein wenig Zeit kosten. Zeit f√ºr einen weiteren Kaffee Tee. ‚òï \"\"\" md\"\"\" Als n√§chstes w√§re es angebracht das Notebook auf deinen Rechner zu speichern. Dazu f√ºge im oberen K√§stchen dein Wunschort und Name der Datei .jl am Ende ein und dr√ºcke anschlie√üend `Enter`. \"\"\" PlutoUI.Resource \"https i.imgur.com zsLQGzr.png\" md\"\"\" Nun kannst du das Notebook √§ndern wie du m√∂chtest. √Ñnderungen werden prinzipiell automatisch gespeichert du kannst aber auch mit `STRG S` auf Nummer sicher gehen. Du bist soweit fertig? Damit kommen wir nun zum Export des Plutonotebooks zu einer PDF. Stelle sicher, dass all deine Zellen mit `Shift Enter` ausgef√ºhrt wurden. Klicke nun oben rechts auf das Teilen Symbol und anschlie√üend auf PDF. Die PDF kannst du auf StudIP in deinen Aufgabenordner hinzuf√ºgen ebenso die .jl Datei wenn du m√∂chtest . \"\"\" PlutoUI.Resource \"https i.imgur.com 1gsmRQD.png\" md\"\"\" Wie funktionieren Pluto Notebooks? \"\"\" md\"\"\" In Pluto haben wir Zellen in denen wir unser Julia Code mittels `Shift Enter` ausf√ºhren k√∂nnen. Z.B. \"\"\" x 2 md\"\"\" Um eine neue Zelle zu erzeugen k√∂nnen wir √ºber der alten hovern und die \" \" Symbole links oben unten nutzen um dar√ºber darunter eine neue Zelle zu erzeugen. \"\"\" md\"\"\" Grunds√§tzlich kennt eine Zelle den Inhalt der anderen Zellen. Wenn wir in der n√§chsten Zelle also y 5x schreiben, so erscheint als Output 10. Zellen sind also reaktiv . \"\"\" y 5x md\"\"\" Falls ihr mehrere Zeilen Code in eine Zelle stecken wollt, ben√∂tigt ihr eine `begin .. end` Umgebung. Dies hat weniger was mit Julia und mehr mit Pluto zutun. Zum Beispiel \"\"\" begin üçé 3 üçê 10 üçé üçê end md\"\"\" Womit wir endg√ºltig √Ñpfel mit Birnen vergleichen k√∂nnen. Hier erscheint als Ausgabe `true` da 3 tats√§chlich kleiner als 10 ist. In Julia k√∂nnen wir auch Smileys einen Variablenwert zuweisen, ebenso \\LaTeX Symbolen. Soviel zur Installation, in den Grundlagen findet ihr mehr Julia üòÑ. \"\"\" md\"\"\" Misc \"\"\" TableOfContents "},{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Schnelleinstieg: Fastrack to Julia  cheatsheet. √úbersicht f√ºr Befehlsunterschiede zwischen Matlab-Python-Julia: MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Makie Plots: Makie.jl Vorlagen"},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation/","title":"installation","tags":[],"text":"First-time setup: Installiere Julia & Pluto Video Version von Fons (Entwickler von Pluto): Text und Bilder Version: Schritt 1: Installiere Julia  1.8.2 Gehe auf  https://julialang.org/downloads  und downloade die momentan stabile Version, Julia  1.8.2 . Achte auf die korrekte Version f√ºr dein Betriebssystem (Linux x86, Mac, Windows, etc). Bei Mac: Zus√§tzlich beachten ob du einen M-Prozessor besitzt oder ein Intel-Prozessor (F√ºr Info: Apple-Symbol ‚Äì> √úber diesen Mac). Schritt 2: Run Julia Nach der Installation,  stelle sicher, dass du Julia ausf√ºhren kannst . Auf manchen Systemen, ist dies verkn√ºpft mit der einfachen Suche nach dem Programm ‚ÄúJulia  1.8.2 ‚Äù und anschlie√üenden ausf√ºhren; in anderen, musst du den Befehl  julia  im Terminal eingeben. Nach der Ausf√ºhrung stelle sicher, dass  1 + 1  tats√§chlich  2  ist: Schritt 3: Installiere  Pluto Als n√§chstes installieren wir  Pluto , eine Notebook Umgebung die wir im Laufe des Praktikas nutzen werden. Pluto ist eine Julia  Programmierumgebung  die extra f√ºr Interaktivit√§t und schnelle Experimente von  **\nFons van der Plas**  entwickelt wurde. √ñffne das  Julia REPL . Dies ist ein command-line interface f√ºr Julia, siehe auch den vorherigen Screenshot. Hier kannst du  Julia Kommandos , eintippen und anschlie√üend ENTER dr√ºcken, dann l√§uft es, und du siehst das Resultat. Um Pluto zu installieren, m√ºssen wir ein  package manager command  eingeben. Um vom  Julia  Modus zum  Pkg  Modus zu wechslen tippe  ]  (geschlossene eckige Klammer) nachdem  julia>  Feld: \njulia> ]\n\n(@v 1.8 ) pkg>\n Die Zeile wird nun blau gef√§rbt sein und das linke Feld wechselt zu  pkg> , was andeutet, dass du dich im  package manager mode  befindest. Dieser Modus erlaubt es dir Operationen auf  packages  (auch libraries, oder deutsch Pakete genannt) auszuf√ºhren. Um Pluto zu installieren, f√ºhre das folgende (sensibel auf Gro√ü-/Kleinschreibung) Kommando aus  add  (install). Du solltest dies nur einmal pro Installtion von Julia machen m√ºssen. \n(@v 1.8 ) pkg> add Pluto\n Dies k√∂nnte einige Minuten in Anspruch nehmen, zuh√∂ren und Kaffee trinken! Du kannst nun das Terminal schlie√üen. Schritt 4: Nutze modernen browser: Mozilla Firefox / Google Chrome Firefox und Chrome sind f√ºr diesen Kurs bzw. Pluto Notebooks am besten geeignet. Zweite Mal:  F√ºhre Pluto aus & √∂ffne ein Pluto-Notebook Wiederhole die folgenden Schritte, wenn du an einen Projekt oder deinen Aufgabenblatt arbeiten m√∂chtest. Schritt 1: Starte Pluto Starte die Julia REPL, wie du es auch schon bei dem first-time setup getan hast. Im REPL tippe: julia> import Pluto; using Pluto\n\njulia> Pluto.run()\n Das Terminal wird dir dann sagen zu  http://localhost:1234/  (oder √§hnliche URL) zu gehen. Lasst uns also Firefox oder Chrome √∂ffnen und f√ºgt die URL in die Adressbar ein. Schritt 2a: √ñffne ein Notebook aus dem Web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says ‚ÄúEdit or run this notebook‚Äù. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here‚Äôs how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  ‚ÄúSave notebook‚Ä¶‚Äù . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"orga/","title":"Kurslogistik","tags":["welcome"],"text":"Computerorientierte Mathematik, Algorithmen & Strukturen\n \n        Praktika in  Julia\n     \n        Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023/24 Willkommen in der Julia-Praktikumsgruppe der CAS-Vorlesung im Wintersemester 2023/2024. Auf dieser Homepage werdet ihr eine √úbersicht\nzur Julia-Syntax erhalten. Zudem werden hier eure Pluto-Notebooks zur Bearbeitung der Aufgaben bereitgestellt. Au√üerdem versuche ich mit einem Delay die Vorlesung auf Julia zu √ºbersetzen und ebenfalls im ‚ÄúVorlesungen‚Äù-Reiter dieser Homepage hochzuladen. \n    Man sollte dennoch die Vorlesung besuchen, denn dort werden vorallem mathematische Konzepte aufgezeigt.  \n Randbedingungen Hardware Unser Praktikumsraum Haus 1, Raum 227 besitzt Windows-PCs. Praktika findet w√∂chentlich donnerstags um 0730 Uhr ‚òïÔ∏è statt. Liebend gern k√∂nnt ihr eure eigenen Rechner mitbringen (MacOS, Linux oder Windows) - wir ben√∂tigen keine Software-Lizenzen Abgaben Genereller Ablaufplan sieht vor, dass wir die meisten Aufgaben des Aufgabenblattes in diesem Praktika gemeinsam bearbeiten und diskutieren. Die unterstrichene Aufgabe auf dem Blatt ist eine Hausaufgabe, die Ihr entweder, falls ihr euch langweilt, hier alleine l√∂sen k√∂nnt oder zuhause. Ihr habt immer eine Woche Zeit das Aufgabenblatt zu bearbeiten und vollst√§ndig als PDF und jl File im ‚ÄúAufgaben‚Äù-Men√º der Vorlesungsveranstaltung auf StudIP hochzuladen.  Wie funktioniert das?  Schaut euch den Reiter ‚ÄúSoftware Installation‚Äù und den dortigen Text an. üòâ Werde ich euch auch in Ruhe erkl√§ren. Es soll nicht nur die Hausaufgabe, sondern das gesamte Aufgabenblatt abgegeben werden. Nach der Abgabe werden, im Laufe von einer Woche, Hinweise im selbigen ‚ÄúAufgaben‚Äù-Men√º auftauchen. Dort wird prinzipiell stehen ob die Abgabe den Anforderungen gen√ºgt oder nicht. Falls letzteres eintritt, stehen dort Verbesserungsvorschl√§ge / Tipps die bei der sp√§teren Abgabe des Portfolios zu ber√ºcksichtigen sind. Praktikumsbericht / Portfolio Am Ende der Veranstaltung alle (vollst√§ndigen) Aufgabenbl√§tter als pdf zusammenf√ºhren und abermals in den ‚ÄúAufgaben‚Äù-Men√º hochladen. Es gibt keine schriftliche Klausur. Anwesenheit Jeder muss mindestens 12 von 14 Seminaren / Praktika besuchen. Bei Krankheit bitte mir Bescheid geben und dann Zettel Frau S. Neumann √ºbermitteln. Hilfe / Fragen Falls ihr Fragen zu Julia / dieser Website habt, meldet euch bei mir per Mail:  hannes.wallner @uni-rostock .de oder versucht mich im B√ºro: Haus 3, Raum 325 anzutreffen. Ich habe ein Typo / Fehler gefunden! F√ºr den Experten: Erstellt ein Issue auf GitHub oder noch besser f√ºr git-Experten: Erstellt ein Merge Request mit potentiellen fix. Das GitHub Repository ist hier zu finden: https://github.com/HaneWall/CAS23 ansonsten einfach mir eine Mail schreiben oder im Praktika ansprechen Ich w√ºnsche euch viel Spa√ü und Erfolg,\ncheers Hannes"},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict main \"Willkommen\" collections \"welcome\" .pages, \"Grundlagen Julia\" collections \"preliminaries\" .pages, \"Aufgabenbl√§tter\" collections \"assignments\" .pages, \"Vorlesungen\" collections \"lecs\" .pages, \"Module 3 Climate Science\" collections \"module3\" .pages, , about Dict authors name \"Prof. Jens Starke\", url \"http www.jstarke.eu\" , name \"Hannes Wallner\", url \"https github.com HaneWall\" , title \"CMAS Julia\", subtitle \"Eine interaktive Einf√ºhrung\", term \"Winter 2023 2024\", institution \"Universit√§t Rostock\", institution url \"http www.uni rostock.de\", institution logo \"black logo uni julia.svg\", institution logo darkmode \"white logo uni julia.svg\" "},{"url":"whyjulia/","title":"Warum Julia?","tags":["welcome"],"text":"Warum Julia? Hier die eventuell am√ºsante, aber dennoch ernstzunehmende Beantwortung der Entwickler vom MIT, welche die Sprache 2012 ver√∂ffentlichten: \n           Auszug Julia Manifest 2012\n     In short, because we are greedy.  ¬†\nWe are power Matlab users. Some of us are Lisp hackers. Some are Pythonistas, others Rubyists, still others Perl hackers. There are those of us who used Mathematica before we could grow facial hair. There are those who still can‚Äôt grow facial hair. We‚Äôve generated more R plots than any sane person should. C is our desert island programming language. ¬†\n ¬†\nWe love all of these languages; they are wonderful and powerful. For the work we do ‚Äî scientific computing, machine learning, data mining, large-scale linear algebra, distributed and parallel computing ‚Äî each one is perfect for some aspects of the work and terrible for others. Each one is a trade-off. ¬†\n ¬†\nWe are greedy: we want more. ¬†\n ¬†\nWe want a language that‚Äôs open source, with a liberal license. We want the speed of C with the dynamism of Ruby. We want a language that‚Äôs homoiconic, with true macros like Lisp, but with obvious, familiar mathematical notation like Matlab. We want something as usable for general programming as Python, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled. ¬†\n ¬†\n(Did we mention it should be as fast as C?) Das klingt alles sehr hochtrabend - elf Jahre sp√§ter und f√ºnf Jahre nach Julia 1.0 (quasi noch ein Baby in der Informatik) muss man jedoch sagen, dass es Ihnen im Gro√üen und Ganzen gelungen ist, eine kompetetive Programmiersprache zu entwickeln, die den Tod von zumindest Matlab besiegeln k√∂nnte. Warum Julia in diesen Kurs? Im Laufe eures Studiums werdet ihr vorallem mit Matlab, Python oder Julia bzw. allgemein mit dem  numerischen  Programmieren in Ber√ºhrung kommen. Folglich ist es sinnvoll bereits hier mit Julia (bzw. Matlab - nahezu gleiche Syntax) anzufangen. Computeralgebrasysteme wie Maple verfolgen hingegen eine andere Philosophie und versuchen mit symbolischen Umformungen und analytischen Ergebnissen zu gl√§nzen. Definitiv besitzen beide Herangehensweisen ihre Daseinsberechtigung, jedoch haben  numerische  Verfahren deutlich gr√∂√üere Anwendungsbereiche (siehe unten Industrie & Bildung). Ist die Wahl der Programmiersprache endg√ºltig? Nein, keineswegs! Der typische Weg ist in etwa so: Man lernt eine Sprache sehr gut kennen und lernt grundlegende Prinzipien, Muster bzw. Konzepte. In dieser Sprache f√§ngt man dann an Probleme zu l√∂sen und Projekte f√ºrs Studium zu bearbeiten. √úber die Zeit werdet Ihr dann durch das Internet, andere Kurse oder Kommilitonen auf andere Programmiersprachen treffen, in der das spezifische Problem noch viel leichter zu l√∂sen ist. Also war dann alles umsonst? Nein! Die Muster und die Syntax sind in allen Sprachen ziemlich nah aneinander. Wenn Ihr den Namen des Musters/Konzepts bzw. der Syntax beherrscht k√∂nnt ihr mit einfachen  googlen  eine neue Programmiersprache lernen! Jede weitere Programmiersprache ist dann nur noch Formsache. The Two-Language Problem Innerhalb der Industrie und Forschung gibt es seit vielen Jahrzehnten ein Problem. H√§ufig m√∂chte man ein Sachverhalt verstehen und simulieren und greift somit zu einer Skriptsprache wie Python/Matlab/R, um schnell einen Prototypen zu entwickeln. Funktioniert dieser, wird der gesamte Prototyp in eine performantere, kompilierte Sprache wie C oder Rust umgeschrieben. Dieser Entwicklungsprozess kann sehr lange dauern. Im Laufe der letzten 10 Jahre kam es dann zur einer Popularit√§tsexplosion von Python, da man eine vermeidliche L√∂sung f√ºr dieses Problem fand. Python war schon immer durch seine kinderleichte Syntax bekannt, ist jedoch selbst √§u√üerst langsam. Aus diesem Grund  schummelt  man nun in Python etwas und importiert direkt C-Pakete (z.B. NumPy, TensorFlow oder PyTorch) um seine Berechnungen durchzuf√ºhren. Demnach wird Python quasi als leichte Benutzeroberfl√§che von C genutzt. Man kann sich vorstellen, dass dies erstmal einen ordentlichen Performanceboost mit sich bringt, aber man auch schnell auf Grenzen st√∂√üt und nie ganz an die Performance von kompilierten C herankommt bzw. man einfach nicht die gleiche Flexibilit√§t besitzt, wie bei einen reinen C Projekt. Eine wirklich elegante L√∂sung ist das also nicht. Hier kommt nun Julia ins Spiel und √ºberzeugt mit √§hnlicher Performance zu C, nativen Paketen und einer Syntax die im  Sweetspot  zwischen C, Matlab und Python einzuordnen ist. Dar√ºberhinaus kann Julia nativ Grafikkarten (CUDA) f√ºr Berechnungen nutzen und ist damit bestens f√ºr Supercomputer/ High-Performance-Computing geeignet. Julia ist in Julia selbst und C geschrieben und vollst√§ndig Open-Source (also auch kostenlos). Diese Politik f√ºhrt dazu, dass jeder aktiv die Sprache mitgestalten und weiter optimieren kann. Durch die leichte Syntax Julia`s k√∂nnen wir also schnell Prototypen erstellen, die dann mittels Optimierung des Codes noch in der selben Sprache zu einen echten Produkt heranreifen k√∂nnen. Industrie Der gr√∂√üte Verm√∂gensverwalter der Welt  BlackRock  setzt bei seinen Datenanalysesystem  Aladdin  auf Julia. ASML , bekannt durch seine Lithografieverfahren (die es erm√∂glichen Computerchips herzustellen - Thema der Weltpolitik), wechseln seit zwei Jahren von Matlab und Python zu Julia. Inzwischen hat  ASML  √ºber 130 private Julia Verzeichnisse auf GitHub, nat√ºrlich alle streng geheim. Amazon  nutzt Julia f√ºr Quantum Computing. Dies ist vermutlich die Zukunft der ganzen, noch sehr jungen, Branche da die hier entwickelten Pakete nur in Julia existieren. Seit 2022 wertet  CERN  Daten vom Large-Hydron-Collider mit Julia aus. Intel, IBM, Apple, NASA  .. sind alle aktive Sponsor der Sprache und adoptieren in bestimmten Bereichen zu Julia. Bildung & Forschung Die gro√üe Forschungsgruppe  Modelling Climate Alliance  produziert ein State-of-the-Art Paket f√ºr die Simulation des Weltklimas in Julia. Die Verbindung von  Big Data  mit rasanten Algorithmen in Julia, erlaubt es vorallem in der Pharmaindustrie ( Moderna, Pfizer, AstraZeneca ) schneller Medikamente zu entwickeln. Die renomiertesten Universit√§ten wie z.B. MIT, Stanford, UC Berkeley, Brown, ETH Zurich etc. bieten alle Kurse in Julia an (jetzt auch in Rostock!) √úbrigens diese Website wurde auch mit Julia gebaut, cheers Hannes"},{"url":"week_0/arrays/","title":"Arrays","tags":["preliminaries"],"text":" A Pluto.jl notebook v0.19.26 frontmatter chapter 2 order 2 title \"Arrays\" layout \"layout.jlhtml\" tags \"preliminaries\" description \"\" using Markdown using InteractiveUtils using LinearAlgebra using PlutoUI md\" `Array`s\" md\"\"\" `Array`s sind gewisserma√üen das Fundament der computerorientierten Mathematik. Sie erlauben es uns mehrere Werte zu speichern und auszulesen. \"\"\" md\"\"\" warning \"Hinweis\" In Julia gibt es auch die Struktur `tuple`. Diese k√∂nnen ebenfalls Daten speichern sind aber nach der Initialisierung nicht mehr ver√§nderbar. In diesen Kurs ben√∂tigen wir vorerst nur `Array`s. \"\"\" md\" 1D `Arrays`\" md\"\"\" Wir k√∂nnen ein eindimensionales `Array` 1 dimensional, oder 1D `Array` durch eckige Klammern ` ` erzeugen. \"\"\" v 1, 3, 5 typeof v md\"\"\" Die `1` im Typen zeigt die Anzahl der Dimensionen. Ausgesprochen `v` ist ein 1D array, welches Elemente vom Typen `Int64` beherbergt. Fundamental bei Arrays Wir k√∂nnen deren Elemente einsehen und √§ndern. Zum Beispiel k√∂nnen wir durch `array index ` uns das Element an der Position `index` des Arrays ausgeben lassen. \"\"\" v 2 md\"\"\" warning \"Hinweis\" Anders als in Python oder C, fangen in Julia Matlab die `Indizes` bei 1 und nicht bei 0 an. Das macht es f√ºr Naturwissenschaftler sch√∂ner und f√ºr Informatiker wohlm√∂glich h√§sslicher. \"\"\" md\"\"\" Nat√ºrlich k√∂nnen wir auch das Element an zweiter Stelle √§ndern \"\"\" v 2 10 v md\"\"\" `Array` `List` comprehensions \"\"\" md\"\"\" Eine √§u√üerst elegante Art und Weise `Array`s zu erzeugen ist das sogenannte array comprehension Muster in Python list comprehension . Dabei verbinden wir eine For Schleife mit der Konstruktion eines `Array`s. Z.B. alle Quadratzahlen von 1 bis 10 als 1D `Array` \"\"\" v2 i^2 for i in 1 10 md\"\"\" Die Alternative Zun√§chst erstellen wir ein 10 Elemente langes Array aus Nullen vom Typ `Int64`. \"\"\" v3 zeros Int64, 10 md\"\"\" Anschlie√üend iterieren wir mittels `for` Schleife √ºber die `Indizes` des `Array`s und ver√§ndern die Elemente zu den gew√ºnschten Quadratzahlen. \"\"\" begin for idx in 1 10 v3 idx idx^2 end v3 end md\"\"\" `Array` Slicing \"\"\" md\"\"\" Sagen wir, wir m√∂chten ein St√ºck aus dem ehemaligen `Array` extrahieren. Spezifischer wir m√∂chten ein neues Array `v4` erzeugen welches dem urspr√ºnglichen `v3` vom `Index` 3 bis 7 entspricht Grenzen inkludiert . Dies k√∂nnen wir durch den ` ` Operator innerhalb der eckigen Klammer gew√§hrleisten. \"\"\" v4 v3 3 7 md\"\"\" Ab und an kommt es vor, dass man eventuell nur jedes `n` te Element des urspr√ºnglichen `Array`s ben√∂tigt. Daf√ºr nutzen wir dann die slicing Syntax, bei der wir zwischen den `Start` und `Stop` `Index` zus√§tzlich eine Schrittweite `Step` hinzuf√ºgen. `array Start Step Stop ` . Z.B. nur jedes `2` te Element des Quadratzahlenarrays \"\"\" v3 v5 v3 1 2 10 md\"\"\" correct \"Tipp\" Niemand h√§lt uns ab r√ºckw√§rts zu z√§hlen. \"\"\" v3 v6 v3 10 2 1 md\"\"\" hint \"Verst√§ndnisfrage Warum ist v6 nicht v5, blo√ü umgekehrt?\" Das liegt daran, dass wir immer bei `Start` anfangen zu z√§hlen. Bei `v5` starten wir bei `Index` 1 und und rechnen immer ` 2` bis `10` erreicht wird. Blo√ü wird 10 nie erreicht, sondern nur der `Index` 9, also Element 81. Einen `Index` 11 gibt im 10 Element `Array` nicht, folglich stoppt das slicing . Bei `v6` hingegen starten wir bei `Index` 10, also Element 100, erreichen aber aus selbigen Grund nur `Index` 2 und nicht `Index` 1. \"\"\" md\"\"\" Konstruktion von `Arrays` mit festgelegter Schrittweite \"\"\" md\"\"\" Mithilfe der Slicing Syntax k√∂nnen wir in Julia auch `Array`s konstruieren. Zun√§chst bastelt man sich eine range mittels `r Start Step Stop`, diese kann dann anschlie√üend mittels `collect r ` zu einen `Array` umgeformt werden. Zum Beispiel hier die Erzeugung eines 1D `Array`s, dessen Elemente von 1 bis 19 mit einer Schrittweite von 3 reichen. \"\"\" arr collect 1 3 19 md\" Auch ein ha√ºfiges Szenario Wir kennen den `Start` und `Stop` eines equidistanten Gitters, aber nicht die Schrittweite sondern nur die L√§nge des `Array`s. Sicherlich k√∂nnte man dann die Schrittweite errechnen, einfacher ist es jedoch den `range ` Befehl zu nutzen. Hier z.B. ein equidistantes Gitter von 1 bis 12, welches 7 Elemente beherbergt. \" arr2 collect range 1, 12, length 7 md\" Broadcasting Funktionen auf `Array`s anwenden \" md\" Sagen wir, wir haben ein 1D `Array` namens `zahlen`. Von jeden Element in `zahlen` m√∂chten wir das Quadrat bilden und anschlie√üend minus eins rechnen. \" zahlen collect 1 10 md\" Also basteln wir uns eine Funktion namens `quadrat minus eins` die eine Variable `d` einliest, diese quadriert und anschlie√üend minus Eins rechnet. \" function quadrat minus eins d return d^2 1 end md\" Wenn wir nun versuchen das gesamte `Array` zahlen der Funktion zu √ºbergeben bekommen wir einen Error, da die Funktion davon ausgeht, dass sie nur ein einziges Element bekommt und nicht ein ganzes `Array`. \" quadrat minus eins zahlen md\" Genauer formuliert bekommen wir einen Fehler, da der Potenzoperator `^` nicht wei√ü, wie er mit einen Vektor bzw. einen 1D `array` umzugehen hat. Um dieses Problem zu l√∂sen m√ºssen wir der Funktion mitteilen, dass sie jedes Element des `Array`s zahlen einzeln einlesen und verarbeiten soll. In Julia auch in MATLAB wird dies durch ein Punkt `.` zwischen Funktionsname und den runden Klammern kenntlich gemacht. \" vals quadrat minus eins. zahlen md\"Allgemein spricht man hier von der sogenannten Broadcast Syntax.\" md\" Beispiel Sinus Array Bauen wir ein feines Gitter mit der Schrittweite 0.01, welches sich von 0 bis 2œÄ ersteckt. Anschlie√üend wollen wir den Sinus an jeden Gitterpunkt ausrechnen. \" args collect 0. 0.01 2œÄ md\"Nun rechnen wir an jeden Gitterpunkt den sin aus \" y sin. args md\" Das dies wirklich der Sinus ist, m√ºsst ihr mir bis hierhin glauben. Eine grafische Darstellung ist im Plots Kapitel zu sehen. \" md\"\"\" Beispiel Multiplikation & Addition \"\"\" md\" Um zwei Vektoren elemtweise miteinander zu multiplizieren oder zu addieren ben√∂tigen wir ebenfalls die Broadcast Syntax mit einen Punkt `.` vor der Operation Funktion. \" let a 1, 2, 3 b 4, 5, 6 c a . b end md\" Hingegen das Skalarprodukt durch `dot a, b ` berechnet wird. Hierbei nutzen wir das oben geladene `LinearAlgebra` Paket. \" let a 1, 2, 3 b 4, 5, 6 c dot a, b end md\"Elementweise Addition \" let a 1, 2, 3 b 4, 5, 6 c a . b end md\" L√§ngenmanipulation eines Arrays \" md\" H√§ufig m√∂chten wir die L√§nge eines `Array` √ºber die Zeit √§ndern, z.B. um ein Element erg√§nzen. In Julia kann man dies leicht durch die Befehle `push ` und `pop ` durchf√ºhren. Die Ausrufezeichen wei√üen dabei darauf hin, dass wir aktiv das `Array` ver√§ndern und keine Kopie erzeugen. \" md\" Verl√§ngern\" md\" Erstellen von Array von 1 bis 10 \" q collect 1 10 md\"Anf√ºgen engl. pushen von einen Element an letzter Stelle \" push q, 11 md\" Wie wir sehen haben wir q nachhaltig ver√§ndert \" q md\"Nun m√∂chten wir noch eine 0 an erster Stelle anf√ºgen, also `pushfirst ` \" pushfirst q, 0 md\" Verk√ºrzen\" md\" Auf √§quivalente Art und Weise k√∂nnen wir Arrays verk√ºrzen und Elemente rausschmeisen engl. informatik pop . Auch hier wird hinten angefangen \" pop q q md\" Man kann aber auch vorne Elemente rausschmeissen, also `popfirst ` \" popfirst q q md\" Mittendrin l√∂schen einf√ºgen \" md\" Lasst uns das Element am `Index` 3 l√∂schen. Hier ist zuf√§llig auch das Element gerade 3 \" deleteat q, 3 q md\" Wir k√∂nnen auch ganze Streifen l√∂schen. Lasst uns weiterhin die Elemente von q an den `Indizes` 3 bis 5 l√∂schen. \" deleteat q, 3 5 q md\" Ganz sch√∂ne Sauerei, lasst uns q wieder ab den dritten `Index` mit den richtigen Werten auff√ºllen. \" for idx in 3 6 Syntax insert Array, Index, Element insert q, idx, idx end q md\" 2D `Arrays`\" md\"\"\" 1D `Array`s werden schnell langweilig. Lasst uns nun 2D `Array`s anschauen, die sehr h√§ufig ben√∂tigt werden. Ihr werdet feststellen das mit dem Vorwissen von 1D `Array`s der Sprung zu ND `Array`s nur minimal ist. Man kann auf ganz verschiedene Art und Weisen ein 2D `Array` bzw. eine Matrix erzeugen. Alle sind √§quivalent \"\"\" M 1 2 3 4 M‚ÇÇ 1 2 3 4 md\"\"\" Mittels Spaltenvektoren \"\"\" M‚ÇÉ 1, 3 2, 4 typeof M md\"Die `2` im Typen best√§tigt, dass es sich tats√§chlich um ein 2D `Array` handelt\" md\"\"\" Die Navigation innerhalb eines 2D `Array`s ist identisch zum eindimensionalen Fall. Da wir nun in zwei Dimensionen arbeiten ben√∂tigen wir jedoch f√ºr die Position zwei `Indizes`. Der erste `Index` deklariert die Zeile in der wir arbeiten und der zweite `Index` die Spalte. `array row, column ` bzw. deutsch `array Zeile, Spalte ` \"\"\" M M 1, 1 M 1, 2 md\"\"\" Nat√ºrlich funktioniert auch hier slicing . \"\"\" M 1, 1 2 M 1 2, 2 md\"\"\" Auch hier k√∂nnen wir nat√ºrlich Werte √§ndern. \"\"\" M 1 2, 2 7, 7 M md\"\"\" Vorgefertigte Arrays \"\"\" md\"\"\" F√ºr gro√üe Matrizen ist es wenig sinnvoll, diese per Hand zu definieren. Hier greift man auf bereits vorgefertigte Konstruktionen von Julia zur√ºck. Z.B. k√∂nnen wir eine Matrix ein 2D `Array` voller Nullen durch den Befehl `zeros TYP, Anzahl Zeilen, Anzahl Spalten ` initialisieren. \"\"\" zeros 3, 5 md\"Wenn wir kein TYP angeben, so geht Julia davon aus das wir Gleitkommazahlen `Float64` meinen. M√∂chten wir hingegen ganze Zahlen `Integer` so k√∂nnen wir dies durch den TYP festlegen.\" einmaleins zeros Int64, 5, 5 md\"Jetzt k√∂nnte man mittels zweier in sich gekopppelter `for Schleifen` √ºber die `Indizes` iterieren und somit die Matrix auff√ºllen. Hier z.B. eine 1√ó1 Tabelle bis 5 \" begin for zeilen idx in 1 5 for spalten idx in 1 5 einmaleins zeilen idx, spalten idx zeilen idx spalten idx end end einmaleins end md\"\"\" Das kleine 1√ó1 mittels array comprehension \"\"\" md\"Eine sehr nette und elegante Alternative ist abermals das array comprehension Muster. Hier das 1√ó1 bis 12 durch eine einzige Zeile Code.\" bigeinmaleins zeile spalte for zeile in 1 12, spalte in 1 12 md\"\"\" Broadcasting bei 2D Arrays \"\"\" md\"Nat√ºrlich gibt es noch viele andere vorgefertigte Arrays. Hier z.B. ein 2D `array` voller einsen, welches wir anschlie√üend mittels Broadcasting der Multiplikation zu einen 2D `array` voller Sechsen verwandeln.\" einsen ones Int64, 6, 6 six 6 . einsen md\"\"\" danger \"Dot Operationen Broadcasting sind √§u√üerst wichtig\" Ein fehlender Punkt vor der jeweiligen Operation Funktion kann zu sehr unangenehmen Fehlern f√ºhren. \"\"\" md\"\"\" Es ist wichtig zu betonen, dass man sich genau √ºberlegen muss welche Operation man gerade ben√∂tigt. Hier z.B. eine Matrixmultiplikation von 2 Matrizen `A` und `B` \"\"\" A 1 2 5 9 B 4 3 2 7 C mm A B md\"\"\" Hingegen die elementweise Multiplikation durch ein `.` durchgef√ºhrt wird \"\"\" C em A . B TableOfContents "},{"url":"week_0/basic_syntax/","title":"Variablen, Funktionen, Schleifen, Bedingungen","tags":["preliminaries"],"text":" A Pluto.jl notebook v0.19.26 frontmatter chapter 1 order 1 title \"Variablen, Funktionen, Schleifen, Bedingungen\" layout \"layout.jlhtml\" tags \"preliminaries\" description \"\" using Markdown using InteractiveUtils using PlutoUI md\"\"\" Kurz√ºbersicht Julia correct \"Tipp\" üöß Man sollte diese Grundlagen nicht als Vorlesungsersatz missbrauchen, in der Vorlesung werden mathematische Konzepte aufgezeigt. üé¨ Ready? Dann hier eine kleine Einf√ºhrung \"\"\" md\"\"\" Aus archaischen Gr√ºnden \"\"\" println \"Hello World \" md\" Wie wir sehen emuliert die Pluto Notebookumgebung die entsprechnde `Terminal` `REPL` Ausgabe. \" md\"\"\" Variablen Wir k√∂nnen mithilfe des ` ` Zuweisungsoperators Variablen definieren. Dabei wird immer der linken Variablen der rechte Wert zugewiesen. Einmal festgelegt k√∂nnen wir dann die Gr√∂√üe Variable auch in anderen Zellen nutzen. \"\"\" x 3 y 2x md\"\"\" warning \"Hinweis\" Das Ausf√ºhren einer Zelle erfolgt mit `Shift Enter`. Standardm√§√üig zeigt Pluto die Ausgabe √ºber der ausgef√ºhrten Zelle an. Dies kann man beispielsweise durch ein Semikolon am Ende einer Zeile unterdr√ºcken. \"\"\" md\"\"\" Um mehrere Zeilen ausf√ºhren zu k√∂nnen und dennoch die Variablen global in allen Zellen bereitzustellen, kann eine `begin ... end` Umgebung genutzt werden. \"\"\" begin h 2 p 3 k 3h 2p end k md\"\"\"M√∂chte man mehrere Zeilen hintereinander ausf√ºhren, aber die Sichtbarkeit der Variablen f√ºr andere Zellen beschr√§nken so kann man eine `let ... end` Umgebung nutzen.\"\"\" let c 2 d 3 e 3c 2d end md\"\"\" Man definiert die Variablen also lokal in der Zelle `local scope` . Demnach erhalten wir nach Abfrage der Variablen `c` in einer anderen Zelle einen Error. \"\"\" c md\"Mithilfe von `typeof` k√∂nnen wir den Typen einer Variablen abfragen \" typeof y md\"\"\" In diesen Fall ist `y` eine 64Bit Integer Zahl. Es werden demnach 64 Bits Nullen und Einsen bereitgestellt um die ganze Zahl darzustellen. Dazu eventuell an anderer Stelle mehr... \"\"\" md\" Funktionen\" md\"\"\" H√§ufig braucht man eine bestimmte Prozedur bestimmte Abfolge von Befehlen innerhalb eines Programms immer und immer wieder. Zur F√∂rderung der Lesbarkeit des Codes, aber auch zur Verk√ºrzung ist es dann ratsam Funktionen zu definieren. In Julia gibt es ganz verschiedene M√∂glichkeiten Funktionen zu deklarieren. Hier sind ein paar aufgezeigt, die alle identisch sind \"\"\" f‚ÇÅ x 2 x f‚ÇÇ x x 2 x function f‚ÇÉ x return 2 x end md\"Um eine Funktion aufzurufen und an einer Stelle auszuwerten m√ºssen wir runde Klammern ` ` nutzen.\" f‚ÇÅ 10 md\"\"\" warning \"Hinweis\" F√ºr l√§ngere Funktionen sollte man die Syntax mit den `function` und `end` keyword nutzen. Au√üerdem kann man nat√ºrlich multivariable Funktionen definieren. \"\"\" function g x, y z x 2y return z^2 end g 1, 2 md\" For loops For Schleifen\" md\"\"\" Nutze `for` zum iterieren √ºber ein `Iterator` `Array` `Range` und dessen Variablen. \"\"\" let Dies ist ein Kommentar Kennzeichunng mittels s 0 Summation aller Zahlen von 1 bis 10 for i in 1 10 s s i end s end md\"Hier ist `1 10` eine range welche die Zahlen von 1 bis 10 repr√§sentiert. Der `default` Abstand zwischen den Zahlen ist 1.\" typeof 1 10 md\"\"\" Wir haben gerade einen `let` Block genutzt um eine Variable `s` zu definieren. Dabei w√§re es hier angebracht gewesen eine Funktion `mysum` zu schreiben, welche dann `global` in allen Zellen dieses Notebooks ausgef√ºhrt werden kann \"\"\" function mysum n s 0 for i in 1 n s i √Ñquivalent zu s s i end return s end md\"\"\" Jetzt k√∂nnen wir die Funktion in einer anderen Zelle aufrufen. Zum Beispiel k√∂nnen wir die ersten 100 nat√ºrlichen Zahlen aufsummieren \"\"\" mysum 100 md\" Conditionals `if` Bedingungen `if`\" md\"\"\" Wir k√∂nnen auswerten ob eine Bedingung `true` oder `false` ist \"\"\" a 3 a 5 typeof a 5 md\"\"\" Wir sehen, dass Bedingungen einen `Bool` Ausgabetypen `true` oder `false` besitzen. Basierend auf der boolschen Ausgabe einer Bedingung k√∂nnen wir den Ablauf des Codes mit einer `if` `else` `end` Umgebung lenken. \"\"\" if a 5 \"small\" else \"big\" end md\"\"\" Falls diese Verzweigung auch noch nicht gen√ºgt, kann man eine `if elseif else end` Umgebung basteln. \"\"\" if a 2 \"small\" elseif a 2 && a 4 \"intermediate\" else \"big\" end md\"\"\" Hierbei haben wir Gebrauch von den `&&` Vergleichsoperator gemacht. Dieser vergleicht zwei boolsche Bedingungen links und rechts vom Operator . Sind beide wahr `true` , so ist die Ausgabe abermals `true`. Generell kann man sogar mehrere `elseif` Abfragen in einen solcher Umgebung unterbringen. \"\"\" md\" Logische Verkn√ºpfungen Vergleichsoperatoren \" md\" Wie in jeder Programmiersprache existieren auch in Julia neben den logischen Und `&&` andere Logikoperationen. Zum Beispiel, das logische oder `||` oder die Negation ` `. Hier eine Reihe an Beispielen \" md\"\"\" warning \"Hinweis\" Das `Macro` ` info` ist in Pluto eine sch√∂nere Ausgabemethode als die Alternative `println `. Du kannst √ºber die `info` Ausgabe hovern, um die enstprechende Zeile Code zu markieren, die diese Info bereitstellte. \"\"\" let info \"Logisches Und \" info true&&false info true&&true info false&&false end let info \"Logisches Oder \" info true||false info true||true info false||false end let info \"Negation \" info true info false end let info \"Variablenvergleiche \" info 2 2 info 3 2 info 2 2 info 2 2 info 2 2 end md\" Mihilfe von Bedingungen k√∂nnen wir nun auch noch eine andere Art und Weise einf√ºhren Schleifen zu konstruieren. \" md\"\"\" While loops While Schleifen \"\"\" md\" While Schleifen laufen solange bis sie eine Abbruchbedingung erreichen. Dies macht Sie um einiges gef√§hrlicher als eine `For` Schleife, da Sie eventuell nie Ihre Abbruchbedingung erzielen und somit ewig laufen. \" let i 0 while i 5 Ausgabe einer Zeile. Das Zeichen wertet die Variable in den runden Klammern aus und f√ºhrt es in ein `String` √ºber info \"i ist i und damit kleiner als 5\" i i 1 end end md\"\"\" correct \"Tipp\" Innerhalb von Schleifen k√∂nnen wir auch vorzeitig den Ablauf mit dem keyword `break` unterbrechen um vollkommen aus der Schleife \"auszubrechen\". \"\"\" let i 0 while i 5 if i 3 break end info \"i ist i und damit kleiner als 5\" i i 1 end end md\"\"\" correct \"Tipp\" Man kann auch in der Schleife bleiben, aber die derzeitige Iteration √ºberspringen mit dem keyword `continue`. \"\"\" let i 0 while i 5 if i 3 i i 1 continue end info \"i ist i und damit kleiner als 5\" i i 1 end end TableOfContents "},{"url":"week_0/plots/","title":"Plots mit Makie","tags":["preliminaries"],"text":" A Pluto.jl notebook v0.19.26 frontmatter chapter 3 order 3 title \"Plots mit Makie\" layout \"layout.jlhtml\" tags \"preliminaries\" description \"\" using Markdown using InteractiveUtils using CairoMakie let using Makie.FileIO, MeshIO f Figure backgroundcolor RGBf 0.98, 0.98, 0.98 , resolution 1000, 700 ga f 1, 1 GridLayout gb f 2, 1 GridLayout gcd f 1 2, 2 GridLayout gc gcd 1, 1 GridLayout gd gcd 2, 1 GridLayout axtop Axis ga 1, 1 axmain Axis ga 2, 1 , xlabel \"before\", ylabel \"after\" axright Axis ga 2, 2 linkyaxes axmain, axright linkxaxes axmain, axtop labels \"treatment\", \"placebo\", \"control\" data randn 3, 100, 2 . 1, 3, 5 for label, col in zip labels, eachslice data, dims 1 scatter axmain, col, label label density axtop, col , 1 density axright, col , 2 , direction y end ylims axtop, low 0 xlims axright, low 0 axmain.xticks 0 3 9 axtop.xticks 0 3 9 leg Legend ga 1, 2 , axmain hidedecorations axtop, grid false hidedecorations axright, grid false leg.tellheight true colgap ga, 10 rowgap ga, 10 Label ga 1, 1 2, Top , \"Stimulus ratings\", valign bottom, font bold, padding 0, 0, 5, 0 xs LinRange 0.5, 6, 50 ys LinRange 0.5, 6, 50 data1 sin x^1.5 cos y^0.5 for x in xs, y in ys . 0.1 . randn. data2 sin x^0.8 cos y^1.5 for x in xs, y in ys . 0.1 . randn. ax1, hm contourf gb 1, 1 , xs, ys, data1, levels 6 ax1.title \"Histological analysis\" contour ax1, xs, ys, data1, levels 5, color black hidexdecorations ax1 ax2, hm2 contourf gb 2, 1 , xs, ys, data2, levels 6 contour ax2, xs, ys, data2, levels 5, color black cb Colorbar gb 1 2, 2 , hm, label \"cell group\" low, high extrema data1 edges range low, high, length 7 centers edges 1 6 . edges 2 7 . 0.5 cb.ticks centers, string. 1 6 cb.alignmode Mixed right 0 colgap gb, 10 rowgap gb, 10 brain load assetpath \"brain.stl\" ax3d Axis3 gc 1, 1 , title \"Brain activation\" m mesh ax3d, brain, color tri 1 2 for tri in brain for i in 1 3 , colormap Reverse magma , Colorbar gc 1, 2 , m, label \"BOLD level\" axs Axis gd row, col for row in 1 3, col in 1 2 hidedecorations . axs, grid false, label false for row in 1 3, col in 1 2 xrange col 1 ? 0 0.1 6pi 0 0.1 10pi eeg sum sin pi rand k x k for k in 1 10 for x in xrange . 0.1 . randn. lines axs row, col , eeg, color black, 0.5 end axs 3, 1 .xlabel \"Day 1\" axs 3, 2 .xlabel \"Day 2\" Label gd 1, , Top , \"EEG traces\", valign bottom, font bold, padding 0, 0, 5, 0 rowgap gd, 10 colgap gd, 10 for i, label in enumerate \"sleep\", \"awake\", \"test\" Box gd i, 3 , color gray90 Label gd i, 3 , label, rotation pi 2, tellheight false end colgap gd, 2, 0 n day 1 length 0 0.1 6pi n day 2 length 0 0.1 10pi colsize gd, 1, Auto n day 1 colsize gd, 2, Auto n day 2 for label, layout in zip \"A\", \"B\", \"C\", \"D\" , ga, gb, gc, gd Label layout 1, 1, TopLeft , label, fontsize 26, font bold, padding 0, 5, 5, 0 , halign right end colsize f.layout, 1, Auto 0.5 rowsize gcd, 1, Auto 1.5 f end using PlutoUI md\" Plots \" md\"\"\" Generell gibt es verschiedene `Packages` auch `libraries` oder in deutsch `Pakete` die es uns erlauben `Array`s zu visualisieren. In anderen Worten wir k√∂nnen mittels Paketen uns schicke Graphen von Funktionen etc. erzeugen. In diesem Kurs nutzen wir das Paket Makie.jl bzw. genauer CairoMakie. \"\"\" md\"\"\" Makie.jl Backends GLMakie interaktive Figuren √ºber die GPU CairoMakie statische hochaufl√∂sende Figuren Publikationen Reports √ºber CPU WGLMakie Work in Progress interaktive Figuren im Browser mittels WebGL RPRMakie Extrem detailierte 3D Ansichten mit Schattierungen mittels RadeonProRender \"\"\" md\"\"\" Andere Plotting Libraries \"\"\" md\"\"\" correct \"Tipp\" Du magst Makie und dessen Befehle nicht? Anders als in Matlab oder Maple kannst du dir einfach ein anderes Paket laden Willkommen in der Freiheit. \"\"\" md\"\"\" Plots.jl, Gadfly.jl, PyPlot.jl, UnicodePlots.jl, PGFPlots.jl, Gnuplot.jl, PlotlyJS.jl \"\"\" md\"\"\" CairoMakie \"\"\" md\"\"\" hint \"Sidefacts\" Das `Makie` framework wird tat√§chlich vom deutchen \"Federal Ministry of Research und Education\" gef√∂rdert und wird unter anderem vom Wetterdienst benutzt. Das Wort Maki e kommt aus den Japanischen und hei√üt \"besprenkeltes Bild\". \"\"\" md\"\"\" Als erstes Laden wir das Paket mittels `using CairoMakie` \"\"\" md\"\"\" Als n√§chstes legen wir fest, was f√ºr ein Ausgabetypen die Grafiken haben sollen. Hier w√§hlen wir `svg`, demnach erstellen wir Vektorgrafiken die stechend scharf sind. Bei gro√üen Bildern sollte man zu `png` wechseln, da die Vektorgrafik sonst zu gro√ü wird. \"\"\" CairoMakie.activate type \"svg\" md\" Motivation \" md\" Zum Auswerten von Daten, aber auch f√ºr die Intuitionsentwicklung komplexer Sachverhalte ist es √§u√üerst angebracht Visualierungen zu erzeugen. Mit Julia und dem Makie Package mit CairoMakie als Backend ist es sehr leicht m√∂glich sehr komplizierte Daten auszuwerten und Grafiken f√ºr Publikationen zu erstellen. Hier ein Beipiel was alles mit Julia und dem Makie Framework so m√∂glich ist \" md\" Eure Aufgabe ist es nat√ºrlich nicht solche komplexen Plots bzw. Grafiken am Ende des Kurses erstellen zu k√∂nnen. Vielmehr soll hier eine Einf√ºhrung stattfinden, nach der Ihr einfache Plots erzeugen k√∂nnt, aber auch einen Einblick bekommt wie weitaus komplizitiere Grafiken kreiert werden k√∂nnen. Deshalb werde ich zun√§chst etwas Hintergrundwissen einf√ºhren. Sollte euch das √ºberhaupt gar nicht interessieren k√∂nnt ihr direkt zu den Minimalbeispielen springen versteht dann aber wahrscheinlich nicht, was die einzelnen Zeilen bewerkstelligen, da man etwas Hintergrundwissen ben√∂tigt. \" md\" Absolutes Minimum \" let Arrays x collect 0. 0.1 2œÄ y sin. x Plot lines x, y end md\" Das funktioniert super, versteckt jedoch so ziemlich alles was im Hintergrund passiert. Mit dem Hintergrundwissen sind wir dann in der Lage deutlich sch√∂nere Grafiken zu erstellen. \" md\" Wie baut man Grafiken? \" md\" Die Antwort im Makie Paket ist St√ºck f√ºr St√ºck wie im echten Leben. Zun√§chst braucht man eine Leinwand bzw. eine Figur engl. Figure auf der man zeichnen m√∂chte. Eine solche Figur k√∂nnen wir durch den Befehl `Figure ` erstellen. Innerhalb der runden Klammern k√∂nnen wir Optionen festlegen, wie z.B. die Resolution Gr√∂√üe und die Hintergrundfarbe. Aus Demonstrationgr√ºnden w√§hle ich hier eine `moccasin`e Hintergrundfarbe f√ºr die Leinwand. \" let Leinwand Figure resolution 1200, 800 , backgroundcolor moccasin, fontsize 23 Leinwand end md\" Nun haben wir eine Variable `Leinwand` vom Typ `Figure` auf der wir eine Achse engl. Axis bzw. Koordinatensystem zeichnen m√∂chten. Dies k√∂nnen wir gew√§hrleisten durch den `Axis Leinwand Zeile, Spalte , Optionen.. ` Befehl. Die Angabe einer Zeile und Spalte mag zun√§chst verwirren ist aber notwendig um die Position der `Axis` bzw. Koordinatensystem auf der `Figure` bzw. Leinwand festzulegen. Man kann sich die Leinwand also wie ein 2D `array` vorstellen. Positionen auf der Leinwand an der wir arbeiten wollen m√ºssen wir also durch die Angabe von `Indizes` definieren. Wir nennen unser `Axis` Objekt hier Achse man kann es nennen wie man m√∂chte . Wie wir sehen passt sich die Gr√∂√üe der `Axis` automatisch der Leinwand an. \" let Ausgabetyp Vektorgrafik CairoMakie.activate type \"svg\" Leinwand Figure resolution 1200, 800 , backgroundcolor moccasin, fontsize 23 Zeichnen eines leeren 2D Kooridnatensystems aud die Leinwand Achse Axis Leinwand 1, 1 , title \"1. Achse\" F√ºr die Anzeige der Grafik m√ºssen wir erneut das `Figure Objekt` hier Leinwand aufrufen Leinwand end md\"\"\" Jetzt k√∂nnen wir in unsere Achse Axis unsere Daten hineinzeichnen. Die Gr√∂√üe der Achse wird sich automatisch den Daten und der Leinwand anpassen. Hier plotten wir zwei 1D `array`s, welche jeweils ein \\sin , \\sin^2 und \\sin darstellen. Wir m√∂chten alle `Array`s in ein gemeinsames Koordinatensystem visualisieren. Dies geschieht durch den Linienplot Befehl `lines Achse, x, y `. Das Ausrufezeichen ` ` zeigt dabei, dass wir aktiv die `Achse` ver√§ndern wir zeichnen darauf . Hier werden zus√§tzlich die `plot` Befehle `scatter ` und `scatterlines ` genutzt um die verschiedenen Funktionen voneinander zu unterscheiden. \"\"\" let CairoMakie.activate type \"svg\" Definition der Leinwand und des Koordinatensystems Leinwand Figure resolution 1200, 800 , backgroundcolor moccasin, fontsize 23 Achse Axis Leinwand 1, 1 , title \"1. Achse\" Definition der St√ºtzstellen Gitterpunkte und die anschlie√üende Auswertung x collect 0 0.01 2œÄ y sin. x Erstellen eines Linienplots von sin lines Achse, x, y Erstellen eines Scatterplots von sin, an den nur jede 10 te St√ºtzstelle benutzt wird scatter Achse, x 1 10 end , y 1 10 end , color red Erstellen eines Scatterlinienplots von sin^2 x scatterlines Achse, x 1 10 end , y 1 10 end .^2, color black Erneutes Aufrufen der Leinwand zum Ansehen Leinwand end md\" Man stelle sich nun vor wir m√∂chten rechts neben dem Koordinatensystem `Achse` ein weiteres Koordinatensystem `Achserechts` platzieren. Im echten Leben w√§re das nat√ºrlich ein Problem, denn wir haben keine freie Leinwand mehr. In Makie bzw. CairoMakie ist das kein Problem. Die Koordinatensysteme werden so skaliert, dass beide auf die Leinwand passen. Aber wie kreiere ich nun ein weiteres Koordinatensystem rechts? Wie bereits erw√§hnt verh√§lt sich die `Figure` wie ein 2D `Array`. Wir k√∂nnen also einfach mit dem Befehl `Achserechs Axis Leinwand 1, 2 , optionen.. ` so tun, als h√§tte die Leinwand zwei Spalten. Makie bzw. CairoMakie erstellt uns dann diese zweite Spalte. Nun k√∂nnen wir wieder mit den `lines ` und der Angabe des richtigen Koordinatensystems auf der rechten Achse zeichnen. Au√üerdem sind wir diesmal etwas genauer und geben unseren Linienplot ein `label` welches anschlie√üend in `axislegend position lt ` benutzt wird, um eine Legende links oben lt left top auf der Achse zu positionieren. \" let CairoMakie.activate type \"svg\" Leinwand Figure resolution 1200, 800 , backgroundcolor moccasin, fontsize 23 Achse Axis Leinwand 1, 1 , title \"1. Achse\" Definition eines zweiten Koordinatensystems in der zweiten Spalte der Leinwand Achserechts Axis Leinwand 1, 2 , title \"2. Achse\" Datenpunkte x collect 0 0.01 2œÄ y sin. x g exp. x Linkes Koordinatensystem lines Achse, x, y scatter Achse, x 1 10 end , y 1 10 end , color red scatterlines Achse, x 1 10 end , y 1 10 end .^2, color black Rechtes Koordinatensystem lines Achserechts, x, g, label \"Exponentialfunktion\", color red, linewidth 3 Erstellen einer Legende, die left top platziert wird axislegend position lt Leinwand end md\"\"\" Erinnerst zu dich noch an die Array Slicing bzw. range Syntax? Wie bereits erw√§hnt, verh√§lt sich die Leinwand wie ein 2D `array`. Lasst uns also eine 2 te Zeile innerhalb der Leinwand kreieren und ein Koordinatensystem produzieren, welches sich √ºber beide Spalten erstreckt. Dies k√∂nnen wir durch den Befehl `Axis Leinwand 2, 1 2 , optionen.. ` durchf√ºhren. Innerhalb der Optionen legen wir au√üerdem xy Achsenbeschriftung mit `xlabel \"x\"` bzw. `ylabel \"y\"` fest. Au√üerdem √§ndern wir die Skalierung der x und y Achse des Koordiantensystems `Achseunten` zu einer logarithmischen Skala 10er Basis . Innerhalb des `lines ` Funktionen f√ºhren wir auch Attribute f√ºr das Aussehen ein. \"\"\" let CairoMakie.activate type \"svg\" Leinwand Figure resolution 1200, 800 , backgroundcolor moccasin, fontsize 23 Achse Axis Leinwand 1, 1 , title \"1. Achse\" Achserechts Axis Leinwand 1, 2 , title \"2. Achse\" Dies ist ein Kommentarblock üòÑ Definition eines dritten Koordinatensystems in der zweiten Zeile, welches sich √ºber beide Spalten der Leinwand erstreckt. Lesbarkeit f√∂rdern durch Zeilenumbruch good practice in the industry Achseunten Axis Leinwand 2, 1 2 , title \"3. Achse Log Log Plot\", xlabel \"x\", ylabel \"f x \", yscale log10, xscale log10 Datenpunkte x collect 0 0.01 2œÄ y sin. x g exp. x lx collect 0.01 0.1 40 h lx.^ 2 k lx.^ 3 Linkes Koordinatensystem lines Achse, x, y scatter Achse, x 1 10 end , y 1 10 end , color red scatterlines Achse, x 1 10 end , y 1 10 end .^2, color black Rechtes Koordinatensystem lines Achserechts, x, g, label \"Exponentialfunktion\", color red, linewidth 3 axislegend Achserechts position lt Unteres Koordinatensystem lines Achseunten, lx, h, color black, linestyle dash, linewidth 3, label L\"x^2\" lines Achseunten, lx, k, color green, linewidth 3, label L\"x^3\" axislegend L\"f x \" position lt Leinwand end md\" Ok genug Details, hier so ein paar Minimalbeispiele um mal eben schnell was zu plotten. \" md\"\"\" Minimalbeispiel 4 Zeiler \"\"\" let CairoMakie.activate type \"svg\" 2 Arrays die gleich lang sind x collect 0 0.01 5 y cos. x . sin. 2x fig Figure resolution 800, 400 ax Axis fig 1, 1 lines ax, x, y fig end md\"\"\" Minimalbeispiel mit Achsenbeschriftung, Legende, multiple Graphen \"\"\" let CairoMakie.activate type \"svg\" Arrays die gleich lang sind x collect 0 0.01 5 y cos. x . sin. 2x z sin. x fig Figure resolution 800, 400 ax Axis fig 1, 1 , xlabel \"x\", ylabel \"f x \" lines ax, x, y, label \"Eine tolle Funktion\" lines ax, x, z, label \"Eine andere Funktion\" axislegend fig end md\"\"\" Minimalbeispiel mit \\LaTeX \"\"\" md\"\"\" H√§ufig ist es sch√∂ner eine \\LaTeX Formatierung f√ºr die Labels zu nutzen. Dies kann einfach durch ein `L` vor dem String Typen ausgedr√ºckt werden. Z.B. `L\"f x \"`. Nat√ºrlich sind auch andere \\LaTeX Befehle abrufbar. Falls ihr noch nie etwas √ºber \\LaTeX geh√∂rt habt, keine Sorge Ihr werdet es im Laufe des Studiums garantiert noch beigebracht bekommen und lieben lernen Microsoft Word is eine Pest f√ºr die Wissenschaft . \"\"\" let CairoMakie.activate type \"svg\" x collect 0 0.05 4œÄ fig Figure resolution 800, 400 ax Axis fig 1, 1 , xlabel L\"x\", ylabel L\"f x \" Man kann als zweites Array auch eine Funktion mittels \"x f x \" √ºbergeben aus der sich das zweite Array aus dem ersten hier x ergibt lines ax, x, x sin 3x cos x 2 x, label L\"\\frac \\sin 3x x \\cos x 2 \" lines ax, x, x cos x x, label L\"\\cos x x\" lines ax, x, x exp x , label L\"e^ x \" axislegend L\"f x \" position rt fig end md\"\"\" 3D Plots \"\"\" md\" F√ºr dreidimensionale Grafiken ben√∂tigen wir einen anderen Achsentypen im echten Leben w√ºrden wir ja auch ein anderes Koordinatensystem ben√∂tigen . Im Makie Paket k√∂nnen wir durch die Funktion `Axis3 .. ` einen 3D Achsenobjekt erzeugen auf den wir anschlie√üend wieder mit anderen Funktionen zeichnen k√∂nnen. Hier z.B. ein `wireframe` oder ein `surface` Plot der Funktion z x,y \\cos x \\sin y Dabei erzeugen wir zun√§chst ein √§quidistantes Gitter f√ºr `x` und `y` und werten anschlie√üend mittels array comprehension die Funktionswerte z x, y auf diesen aus. \" let CairoMakie.activate type \"svg\" x collect 0 0.02 2œÄ y collect 0 0.02 2œÄ Array comprehension z cos x elem sin y elem for x elem in x, y elem in y fig Figure resolution 1200, 600 Linker 3D plot ax3w Axis3 fig 1, 1 , title \"Wireframe\" F√ºr den wireframe plot nehmen wir jedes 10te Element innerhalb der Arrays, damit die Gitterlinien nicht so dicht aneinander kleben wireframe ax3w, x 1 10 end , y 1 10 end , z 1 10 end, 1 10 end , color black Rechter 3D plot ax3 Axis3 fig 1, 2 , title \"Schnieke Surface\" surface ax3, x, y, z, colormap berlin fig end md\" Heatmaps & Contours \" md\" 3D Plots sehen zwar sehr eindrucksvoll aus und k√∂nnen sehr gut das qualitative Verhalten von Daten darstellen, jedoch kann man Datenpunkte nicht wirklich ablesen. Aus diesen Grund betrachtet man h√§ufig `heatmap`s oder H√∂henlinien Konturen engl. `contour` von 3D Plots, die dann wieder in zwei Dimensionen dargestellt werden k√∂nnen. \" let CairoMakie.activate type \"png\" x collect 0 0.02 2œÄ y collect 0 0.02 2œÄ z cos x elem sin y elem for x elem in x, y elem in y fig Figure resolution 800, 700 , fontsize 24 ax Axis fig 1, 1 , xlabel L\"x\", ylabel L\"y\" heat heatmap ax, x, y, z, colormap berlin contour ax, x, y, z, color white, levels 15 farbbar Colorbar fig 1,2 , heat, ticks 1 0.2 1, label L\"z\" fig end md\" More Advanced \" md\"\"\" Der Fantasie sind generell keine Grenzen gesetzt. Hier seht ihr z.B. ein Programm welches elektrische Feldlinien f√ºr einen Dipol und ein Quadrupol plottet. Die Farben der Linien deuten die St√§rke Norm des E Vektors des elektrischen Feldes an rot stark zu schwarz schwach . Rote Punkte sind positive Ladungen, blaue negative Ladungen. \"\"\" let CairoMakie.activate type \"png\" function E q, rx, ry, x, y d sqrt x rx ^2 y ry ^2 ^3 return q x rx d, q y ry d end function charges nq 2 qs for i in 1 nq q i % 2 2 1 push qs, q, cos 2œÄ i nq , sin 2œÄ i nq end qs end function fieldE x,y Ex, Ey 0, 0 for q in qs ex, ey E q..., x, y Ex ex Ey ey end Point Ex, Ey end Erstellen einer Figur und der Achsen Axis auf denen wir zeichnen m√∂chten. fig Figure resolution 1200,800 , fontsize 25 ax1 Axis fig 1,1 aspect DataAspect , title \"Feldlinien Dipol\", xgridvisible false, ygridvisible false ax2 Axis fig 1,2 aspect DataAspect , title \"Feldlinien Quadrupol\", xgridvisible false, ygridvisible false Dipol Axis qs charges streamplot ax1, fieldE, 2..2, 2..2 arrow size 12, linewidth 2.5, colorrange 3,3 , colormap berlin Array comprehension um Ladungen zu plotten scatter ax1, Point qs i 2 3 , color qs i 1 0 ? red dodgerblue, markersize 20 for i in eachindex qs limits ax1, 2,2, 2,2 Quadrupol Axis qs charges nq 4 streamplot ax2, fieldE, 2..2, 2..2 arrow size 12, linewidth 2.5, colorrange 3,3 , colormap berlin scatter ax2, Point qs i 2 3 , color qs i 1 0 ? red dodgerblue, markersize 20 for i in eachindex qs limits ax2, 2,2, 2,2 hidedecorations ax1 grid false hidedecorations ax2 grid false fig end TableOfContents "},{"url":"week_1/assignment_1/","title":"1. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 1 title \"1. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using Roots zur Nullstellenberechnung using CairoMakie zum Plotten end md\" Pakete die wir brauchen werden \" md\" Nach der allerersten Installation von Julia auf deinen PC MAC kann das Laden von folgenden Paketen einige Minuten in Anspruch nehmen. Haben Sie Geduld ‚òï \" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 1. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 26.10.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Persona\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 \"\"\" md\"\"\" warning \"Software\" Erkunden Sie ein wenig die Website und installieren Sie `Julia` und `Pluto` mithilfe des Videos Praktika Textmaterials. \"\"\" md\" Aufgabe 2 \" md\"\"\" warning \"2 a \" Testen Sie in den √úbungsgruppen unter der Verwendung der Pluto Programmierungsumgebung die folgenden Eingaben `1 4 1 3` `1 4 1 3` `sqrt 36 ` `36^ 1 2 ` `27^ 1 3 ` ` Dies ist ein Kommentar`. \"\"\" md\"\"\" Aufgabe 3 Schleifen \"\"\" md\"\"\" warning \"3 a \" Schreiben Sie eine `for` Schleife zur Berechnung der Summe der ersten n Quadratzahlen. \"\"\" md\"\"\" warning \"3 b \" Berechnen Sie unter Verwendung einer `for` Schleife das Produkt aller Elemente des 1D `array`s `J`, wobei `J 3,5,1,8 ` \"\"\" md\"\"\" warning \"3 c \" Sei x 100 . Erstellen Sie eine Schleife, welche x solange durch 2 dividiert, bis x kleiner als 20 ist. Bestimmen Sie mit dem Programm, wie viele Divisionsschritte erforderlich sind. Testen Sie auch andere Werte f√ºr x . \"\"\" md\"\"\" Aufgabe 4 Definition von Funktionen und Bestimmung derer Nullstellen \"\"\" md\"\"\" warning \"4 a \" Der Befehl `a 4` definiert die Variable `a` und `b 3` definiert die Variable `b`. Definieren Sie anschlie√üend die Variable `c` aus der Summe von `a` und `b` \"\"\" md\"\"\" warning \"4 b \" Definieren Sie mit `f x xÀÜ2 3` die Funktion f und werten Sie die Funktion an den Stellen x 0 , x 1 und x 2 aus. \"\"\" md\"\"\" warning \"4 c \" Berechnen Sie mit dem Package ‚ÄòRoots.jl‚Äò und dem Befehl `find zeros` die Nullstellen der in b definierten Funktion f . \"\"\" md\"\"\" Aufgabe 5 Plotten von Funktionen \"\"\" md\"\"\" warning \"5 a \" Plotten Sie die Funktion f x \\tan x mit Hilfe eines geeigneten Befehls des 'CairoMakie' Packages. Experimentieren Sie dabei mit Beschr√§nkungen des x und y Bereichs, um eine aussagekr√§ftige Darstellung zu erhalten, die u.a. die Periodizit√§t sowie das Verhalten der Funktion in der N√§he einer Nullstelle und einer Definitionsl√ºcke zeigt. \"\"\" md\"\"\" warning \"5 b \" Fertigen Sie ein aussagekr√§ftiges Schaubild der Funktionen f x \\exp x , f x \\exp x , f x \\ln x , f x \\sin x , f x \\cos x , f x \\tan x und f x \\cot x an. Verwenden Sie dabei Ihre in a erworbenen Kenntnisse. \"\"\" md\"\"\" Aufgabe 6 MINIPROJEKT Heron Verfahren \"\"\" md\"\"\" warning \"6 a \" Schreiben Sie ein Programm zur Berechnung der Wurzel \\sqrt c mit c \\geq 0 , m√∂glichst ohne auf die Vorlage aus der Vorlesung zu schauen \"\"\" md\"\"\" hint \"Visualisierung\" Eine wunderh√ºbsche Animation zum Heron Verfahren ist hier zufinden Animation https de.wikipedia.org wiki Heron Verfahren media Datei Heron wurzelziehen animated2.gif \"\"\" md\"\"\" warning \"6 b \" Entwickeln Sie nach dem Prinzip des Heron Verfahrens eine numerische Methode, um die dritte Wurzel \\sqrt 3 c einer vorgegebenen nichtnegativen reellen Zahl c iterativ zu bestimmen. Konstruieren Sie hierzu einen Quader mit dem Volumen c , der iterativ in einen W√ºrfel gleichen Volumens umgewandelt wird. Testen Sie das Verfahren numerisch und pr√ºfen Sie das Ergebnis durch eine Probe \"\"\" md\"\"\" danger \"6 c \" Erweitern Sie diesen Ansatz um die n te Wurzel von c numerisch zu berechnen. Testen Sie das Verfahren wieder numerisch und pr√ºfen Sie das Ergebnis durch eine Probe. \"\"\" md\"\"\" Haus aufgabe 7 Vertiefung des √úbungsinhalts \"\"\" md\"\"\" warning \"7 a \" Testen Sie die folgenden Befehle `?abs` `abs 2 ` `abs 2 ` \"\"\" md\"\"\" warning \"7 b \" Ebenso `floor 2.3 ` `floor 1.7 ` `floor 5.8 ` `floor 2.2 ` \"\"\" md\"\"\" warning \"7 c \" c Definieren Sie die Funktion f x 1 ln x und l√∂sen Sie f x 2 mittels Umformulierung des Problems in ein Nullstellenproblem und der anschlie√üenden Nutzung von `find zero` des ‚ÄòRoots.jl‚Äò Pakets. Nutzen Sie die Documentation unten rechts in Pluto, falls n√∂tig kein Verbrechen . \"\"\" md\"\"\" correct \"Feedback optional \" Verbessern Sie diese Veranstaltung Homepage oder das Aufgabenblatt Wie gef√§llt Ihnen diese Homepage, das Konzept der Pluto Notebooks? Was sollten wir im Praktikum ber√ºcksichtigen? Ist das Aufgabenblatt angemessen? Gibt es Verbesserungsvorschl√§ge zur Vorlesung? \"\"\" Ihr Feedback "},{"url":"week_1/lecture_1/","title":"1. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 1 title \"1. Vorlesung\" layout \"layout.jlhtml\" tags \"lecs\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten CairoMakie.activate type \"svg\" end md\"\"\" Pakete die wir ben√∂tigen \"\"\" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 1. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Julia als Taschenrechner \"\"\" 3 5 4 12 3 5 3 5 pi md\"\"\" correct \"Tipp Latex\" Noch sch√∂ner mittels `\\pi Tab `. F√ºr Experten Julia benutzt einen gr√∂√üeren Unicode Input. \"\"\" œÄ sin pi sin œÄ md\"\"\" Ausgabe von Hello World \"\"\" println \"Hello World \" md\"\"\" correct \"Tipp Sch√∂nere Version einer Ausgabe\" In der Plutoumgebung kannst du das `Macro` ` info` f√ºr eine bessere Ausgabe w√§hlen. \"\"\" info \"Hello World \" md\"\"\" 5 mal Ausgabe von Hello World \"\"\" md\"\"\" warning \"Hinweis\" Um mehrere Zeilen in einer Plutozelle auszuf√ºhren ben√∂tigen wir eine `begin .. end` Umgebung. \"\"\" begin info \"Hello world\" info \"Hello world\" info \"Hello world\" info \"Hello world\" info \"Hello world\" end md\"\"\" For Schleife \"\"\" for dummy variable die man so nennen kann wie man m√∂chte 1 5 info \"Hello World\" end md\"\"\" Folgenglieder berechnen For Schleife \"\"\" begin a Float64 leeres Array deren Elemente Gleitkommazahlen seien werden for i 1 100 push a, 1 i f√ºgt an a das Element 1 i. end a end scatter a md\"\"\" correct \"Tipp Der moderne Weg\" Niemand der Julia Python kennt w√ºrde so einen for loop schreiben. Stattdessen nutzt man das array comprehension Muster. Ein einfacher Einzeiler den es so in Maple Matlab nicht gibt. \"\"\" a modern 1 i for i 1 100 scatter a modern md\"\"\" Folgenglieder berechnen bis Folgenglieder sehr klein sind While Schleife \"\"\" begin b Float64 i 1 while 1 i 0.05 push b, 1 i i i 1 end b end md\"\"\" correct \"Tipp Latex\" Falls du mit \\LaTeX vertraut bist, kannst du auch `\\geq tab` ‚â• anstelle von schreiben. \"\"\" scatter b md\"\"\" N√§herungsweise Berechnung der Quadratwurzel von c \"\"\" md\"\"\" Heron Verfahren zur n√§herungsweisen Berechnung der Quadratwurzel von c. \"\"\" md\"\"\" Iterative Umwandlung eines Rechtecks mit den Seiten x und y c x und Fl√§cheninhalt c in ein fl√§chengleiches Quadrat mit der Seitenl√§nge \\sqrt c . Startwert der einen Rechteckseite x 1 1 . Somit ist die andere Rechteckseite y 1 c x 1 c 1 Iterative Berechnung der neuen Rechteckseite x k 1 0.5 x k c x k Somit ist die andere Rechteckseite y k 1 c x k 1 \\frac 2c x k c x k \"\"\" begin c 2 x 1 while abs x c x 0.000001 info x 0.5 x c x end x end md\"\"\" Probe \"\"\" sqrt 2 "},{"url":"week_2/assignment_2/","title":"2. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 2 title \"2. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO F√ºr die Bildermagie im exklusiven Zusatz end md\" Pakete die wir brauchen werden \" md\" Nach der allerersten Installation von Julia auf deinen PC MAC kann das Laden von folgenden Paketen einige Minuten in Anspruch nehmen. Haben Sie Geduld ‚òï \" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 2. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 02.11.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Wiederholung Plotten mit Makie \"\"\" md\"\"\" warning \"1 a \" Plotten Sie die Funktion f a x ax^2 im Bereich 4\\leq x \\leq4 f√ºr verschiedene Werte des Parameters a . Stellen Sie damit eine Vermutung √ºber den Einfluss des Faktors a auf die Gestalt des Graphen von f a auf, wenn sich a von sehr negativen zu positven Werten ver√§ndert. \"\"\" let missing code end md\"\"\" warning \"1 b \" Skizzieren Sie insbesondere f 1 , f 0 und f 1 in einem gemeinsamen Koordinatensystem. \"\"\" let missing code end md\"\"\" Aufgabe 2 Arrays in Julia \"\"\" md\"\"\" warning \"2 a \" Die ersten f√ºnf Folgenglieder einer Folge lauten \\frac 1 2 , \\frac 2 3 , \\frac 3 4 , \\frac 4 5 , \\frac 5 6 . Stellen Sie eine Vermutung √ºber das k te Folgenglied in Abh√§ngigkeit von k auf und geben Sie damit die ersten zwanzig Folgenglieder in Julia an. \"\"\" let missing code end md\"\"\" warning \"2 b \" L√∂schen Sie aus den 1D Array ` 1, 2, 3, 4, 3, 2, 3, 4, 5, 4, 3, 4, 5, 6 ` die Elemente heraus, die mehr als zweimal vorhanden sind. \"\"\" let missing code end md\"\"\" warning \"2 c \" Erstellen Sie ein 2D Array mit zwei Zeilen, bei der die erste Zeile dem 1D Array aus 2 b entspricht. Die Elemente der zweiten Zeile sollen den Indizes des 1D Arrays aus 2 b entsprechen. Beispielsweise w√ºrde das zu erstellende 2D Array f√ºr das 1D Array 4, 8, 1, 0 wie folgt aussehen M \\left \\begin array cccc 4 & 8 & 1 & 0 \\\\ 1 & 2 & 3 & 4\\end array \\right \"\"\" let missing code end md\"\"\" Haus aufgabe 3 Fibonacci Folge \"\"\" md\"\"\" Die Fibonacci Folge ist definiert durch a 0 \\coloneqq 1, a 1 \\coloneqq 2, a k 2 \\coloneqq a k 1 a k mit k \\in \\mathbb N \\lbrace 1, 2, 3, 4 \\ldots \\rbrace \"\"\" md\"\"\" warning \"3 a \" Berechnen Sie alle Folgenglieder a k bis k 20 mit einer `while` Schleife. \"\"\" begin missing code end md\"\"\" warning \"3 b \" Berechnen Sie nun alle Folgenglieder bis k 20 mit einer `for` Schleife und entscheiden Sie, welche Schleifenart f√ºr diese Berechnung geeigneter ist. \"\"\" begin missing code end md\"\"\" warning \"3 c \" Plotten Sie die berechneten Folgenglieder. \"\"\" begin missing code end md\"\"\" warning \"3 d \" Welche Fibonacci Zahlen der ersten 30 Folgenglieder sind ganzzahlig durch 3 teilbar? Nutzen Sie den `mod` Operator. \"\"\" begin missing code end md\"\"\" danger \"4 Zusatz\" Schreiben Sie ein Programm, das das schriftliche Dividieren ganzer Zahlen umsetzt. Die ganzen Zahlen sollen als Ausgangspunkt Ziffer f√ºr Ziffer als 1D Array in Julia angegeben werden. Nutzen Sie den `mod` und `div` Operator. \"\"\" let missing code end md\"\"\" Exklusiver Zusatz F√ºr die Interessierten Bilder sind Arrays \"\"\" md\"\"\" Alles was jetzt noch kommt ist exklusiver Zusatz und nur in unserer Gruppe. Ihr m√ºsst hiervon nichts bearbeiten, aber eventuell f√∂rdert es die Intuition von Indizes. \"\"\" md\"\"\" danger \"Scheint alles sehr Abstrakt, wozu?\" Diese Beschreibungen von Arrays scheinen alle sehr weit hergeholt und kaum anwendbar in der Realit√§t. Dem ist aber ganz und gar nicht so. Hier vielleicht ein einfaches Beispiel, welches zeigt das wir st√§ndig mit Ihnen arbeiten ohne es zu merken. \"\"\" md\"\"\" Ein allt√§gliches Beispiel von 2D Arrays sind Bilder. Hier ein Bild von Tycho Brahe, der vllt. international bekannteste Student der Universit√§t Rostock. \"\"\" brahe url download \"https upload.wikimedia.org wikipedia commons archive 2 2b 20180405083300%21Tycho Brahe.JPG?uselang de\" brahe pic load brahe url md\"\"\" Wir k√∂nnen nun dieses Bild wie ein 2D Array behandeln. Das Bild ist nichts weiter als eine Tabelle voller Zeilen und Spalten, dessen Elemente Farbpixel Farben sind. Lasst uns zun√§chst mit dem Befehl `size` nachschauen wieviel Zeilen und Spalten unser Bild hat. \"\"\" size brahe pic md\"\"\" Wir haben also 450 Zeilen und 303 Spalten. Lasst uns den Pixel in der 420sten Zeile und 80sten Spalte ansehen. Man f√§ngt oben links an zuz√§hlen wie bei Matrizen \"\"\" brahe pic 420, 80 md\"\"\" Ganz sch√∂n langweilig, lasst uns den Pixel Rot f√§rben und anschlie√üend erneut das Gesamtbild ansehen. Wir k√∂nnen ein Farbpixel duch den Befehl `RGB r, g, b ` erzeugen wobei die Variablen `r,g,b` f√ºr red, green, blue stehen und Werte zwischen 0 und 1 annehmen k√∂nnen. 0 f√ºr nicht vorhanden in der Mischung, und 1 f√ºr vollkommen enthalten. Ein roter Pixel ist also `RGB 1, 0, 0 ` \"\"\" RGB 1, 0, 0 RGB 0, 1, 0 RGB 0, 0, 1 RGB 0.8, 0.5, 0.3 let brahe pic load brahe url brahe pic 420, 80 RGB 1.0, 0.0, 0.0 brahe pic end md\"\"\" Seht Ihr den roten Pixel √ºber den \"T\" von \"Tycho Brahe\"? Ganz sch√∂n klein. Lasst uns durch Nutzung der slicing Syntax, stattdessen die ganze 80te Spalte rot f√§rben. Wir m√ºssen also f√ºr jede Zeile das 80te Element Rot f√§rben. \"\"\" let brahe pic load brahe url Wir brauchen die Broadcast Syntax \". \", da wir ein ganzes Array rot f√§rben wollen. 1 end hei√üt hier, dass wir jede existierende Zeile mitnehmen. Man k√∂nnte auch 1 450 schreiben, blo√ü ist man prinzipiell zu faul um sich den ENDindex, also letzten Index des Arrays zumerken. Julia erlaubt uns deshalb einfach `end` zuschreiben. brahe pic 1 end, 80 . RGB 1.0, 0.0, 0.0 brahe pic end md\"\"\" Eventuell ist der Strich noch etwas zu d√ºnn. Lasst uns also den Streifen auf 11 Pixel verbreitern. Zum Beispiel k√∂nnten wir ihn von Spalte 70 bis 80 erstrecken lassen. \"\"\" let brahe pic load brahe url brahe pic 1 end, 70 80 . RGB 1.0, 0.0, 0.0 brahe pic end md\"\"\" danger \" Ihr seid dran Schaut Tycho Brahe in die Augen\" Lass dir durch die Slicing Syntax des 2D Arrays `brahe pic` nur Tycho Brahe`s Augenpartie anzeigen. \"\"\" let brahe pic load brahe url missing code end md\"\"\" danger \" Ihr seid dran Goldene Nase Prothese\" Bedecke Tycho Brahes Nase mit einen gelben Rechteck. Makaberer Fakt Tycho Brahe verlor seine Nase bei einen Duell. \"\"\" let brahe pic load brahe url missing code end md\"\"\" danger \" Ihr seid dran Staucht Tycho Brahe\" Verkleinert Tycho Brahe in der H√∂he, indem Ihr euch nur jede n te Zeile anzeigen lasst. \"\"\" let brahe pic load brahe url missing code end md\"\"\" correct \"Feedback optional \" Verbessern Sie diese Veranstaltung Homepage oder das Aufgabenblatt Wie gef√§llt Ihnen diese Homepage, das Konzept der Pluto Notebooks? Was sollten wir im Praktikum ber√ºcksichtigen? Ist das Aufgabenblatt angemessen? Gibt es Verbesserungsvorschl√§ge zur Vorlesung? \"\"\" Ihr Feedback "},{"url":"week_2/lecture_2/","title":"2. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 2 title \"2. Vorlesung\" tags \"lecs\" layout \"layout.jlhtml\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten CairoMakie.activate type \"svg\" end md\"\"\" Pakete die wir ben√∂tigen \"\"\" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 2. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Berechnung iterativ definierter Folgen Am Beispiel der Folge a n 1 \\frac 1 2 \\left a n \\frac 2 a n \\right zur Berechnung von \\sqrt 2 \"\"\" let a arr Float64 leeres Array, indem wir die Folgenglieder speichern werden. a old 1 sidefact Ihr k√∂nnt \"in\" \" \" oder sogar \"‚àà\" f√ºr For Schleifen verwenden, alle sind identisch, manchmal \"liest\" sich aber eine Variante besser als eine andere. for idx in 1 20 a new 1 2 a old 2 a old push a arr, a new a old a new end Plotten fig Figure Erstellen einer Leinwand ax Axis fig 1, 1 Erstellen eines Koordinatensystems auf der Leinwand scatter ax, a arr Erstellen eines Scatterplots auf unseren Koordinatensystem hlines ax, sqrt 2 , linestyle dash, color black Probe ylims ax, 0.9, 1.6 y Bereich der auf den Koordinatensystem gezeigt werden soll fig erneutes Aufrufen der Leinwand, zum Betrachten des Meisterwerks end md\"\"\" Cauchy Eigenschaft einer Folge testen Am Beispiel der Folge a n \\frac 1 n \\sin n \"\"\" md\"\"\" Preliminaries \"\"\" md\"\"\" Wir k√∂nnen ein 2D Array voller Nullen durch den `zeros` Befehl erzeugen. Generell lautet der Befehl `zeros TYP, anzahl Zeilen, anzahl Spalten ` Wenn wir keinen Typ angeben, so nimmt Julia Float64 Elemente, also Gleitkommazahlen, als `default` bzw. Standard. \"\"\" zeros 3, 3 sin 1 md\"\"\" Das folgende Programm berechnet die Abst√§nde zwischen den Folgengliedern. Von der symmetrsichen Abstandsmatrix wird nur die H√§lfte berechnet. \"\"\" md\"\"\" warning \"Reminder Cauchy Eigenschaft\" Ausgangspunkt Wir haben eine Folge reeller Zahlen a n n\\in\\mathbb N , diese Folge ist eine Cauchy Folge wenn gilt \\forall \\varepsilon 0 \\quad \\exists N \\in \\mathbb N \\quad \\forall m,n \\geq N \\quad |a m a n| \\varepsilon \"√úbersetzt\" F√ºr alle \\varepsilon 0 existiert ein Index N , sodass f√ºr zwei Indizes m , n gr√∂√üergleich N der Abstand zwischen den Folgengliedern a m und a n kleiner als \\varepsilon ist. \"Weiter √úbersetzt\" Abstand der Folgenglieder im Verlauf der Folge wird beliebig klein. \"\"\" let N 50 a zeros N Initialisierung der Folgenglieder m zeros N, N Initialisierung der Abstandsmatrix for i in 1 N a i 1 i sin i for j in 1 i m i, j abs a i a j end end max abstand zeros N for i in 1 N mtemp m i N, i N max abstand i maximum mtemp end fig Figure fontsize 20 ax1 Axis fig 1, 1 , ylabel L\"a n\", xlabel L\"n\" scatter ax1, a ax2 Axis3 fig 2, 1 2 , azimuth 3 œÄ 4, xlabel L\"i\", ylabel L\"j\", zlabel L\"m ij \", title \"Abstandsmatrix\" surface ax2, m, colormap Spectral 11 ax3 Axis fig 1, 2 , xlabel \"N\", ylabel L\"\\max m, n \\geq N |a m a n|\" scatter ax3, max abstand fig end "},{"url":"week_3/assignment_3/","title":"3. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 3 title \"3. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten end md\" Pakete die wir brauchen werden \" md\" Nach der allerersten Installation von Julia auf deinen PC MAC kann das Laden von folgenden Paketen einige Minuten in Anspruch nehmen. Haben Sie Geduld ‚òï \" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 3. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 16.11.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Wiederholung 1D Arrays und Schleifen \"\"\" md\"\"\" correct \"Reminder\" Wie definiert man die Konvergenz einer Folge gegen einen gegebenen Grenzwert? \"\"\" md\"\"\" Hier die Definition hinschreiben. \"\"\" md\"\"\" warning \"1 a \" Erstellen Sie ein 1D Array der ersten 10 Folgenglieder der Folge an a n \\frac n^3 \\sqrt n e^n \"\"\" let missing code end md\"\"\" warning \"1 b \" Plotten Sie die ersten 10 Folgenglieder. \"\"\" let missing code end md\"\"\" warning \"1 c \" Berechnen Sie unter Nutzung einer `for` Schleife den Mittelwert des 1D Arrays aus a . \"\"\" let missing code end md\"\"\" warning \"1 d \" Sei n 0 und p 1 . Schreiben Sie eine Schleife, welche zu n solange 1 addiert, wie p^ n 1 gilt. \"\"\" let missing code end md\"\"\" Aufgabe 2 Fixpunktiterationen f√ºr Abbildungen \"\"\" md\"\"\" Zu untersuchen ist eine Abbildung T \\mathbb R \\rightarrow \\mathbb R mit T x ax b , x \\in \\mathbb R und gegebenen Konstanten a, b \\in \\mathbb R . Die Linearit√§t von T f√ºr den Fall b 0 erm√∂glicht eine einfache mathematische Analyse. \"\"\" md\"\"\" warning \"2 a \" Erzeugen Sie eine Grafik, in der die Abbildung T , also die Funktion x \\mapsto ax b mit a \\frac 1 2 und b 0 zusammen mit dem Graphen der Funktion x \\mapsto x dargestellt wird. Welche Bedeutung hat der Schnittpunkt der beiden Graphen? \"\"\" let missing code end md\"\"\" warning \"2 b \" Berechnen Sie den Fixpunkt von T mit Julia. F√ºhren Sie diese Berechnung zuerst f√ºr a 1 2 und b 0 durch und danach f√ºr beliebige a und b . \"\"\" let missing code end md\"\"\" warning \"2 c \" √úberpr√ºfen Sie die Ergebnisse aus Aufgabenteil b numerisch. Nutzen Sie hierf√ºr zun√§chst wieder die Parameterwerte a \\frac 1 2 und b 0 , und variieren Sie anschlie√üend die Parameter mit a 1.5, 1, 0.5, 0, 0.5, 1, 1.5 und b 0 . Schreiben Sie zur √úberpr√ºfung eine Fixpunktiteration x k 1 ax k b mit dem Initialisierungswert x 0 1 und 10 Iterationen. Speichern Sie au√üerdem die Werte der x i sinnvoll. \"\"\" let missing code end md\"\"\" warning \"2 d \" Plotten Sie in einer Abbildung die x n 1 aus Teil c in Abh√§ngigkeit von x n und zeichnen Sie den Polygonzug der Punktfolge x 0, x 1 , x 1, x 1 , x 1, x 2 , x 2, x 2 , \\ldots, x n 1 , x n , x n, x n ein. Welche Schlussfolgerungen kann man aus den verschiedenen Polygonz√ºgen f√ºr die verschiedenen Parameterwerte ziehen? \"\"\" let missing code end md\"\"\" warning \"2 e \" Zeigen Sie, dass T f√ºr a \\frac 1 2 k kontraktiv ist, wobei die Konstante b beliebig sein kann. Was kann man mit dem Banachschen Fixpunktsatz daraus folgern? \"\"\" let missing code end md\"\"\" Haus aufgabe 3 Schleifen und Cauchy Folgen \"\"\" md\"\"\" correct \"Reminder\" Wie definiert man eine Cauchy Folge? Was ist die Besonderheit von Cauchy Folgen im Raum der reellen Zahl? \"\"\" md\"\"\" Hier die Definition von Cauchy Folge hinschreiben. \"\"\" md\"\"\" warning \"3 a \" Die Folge a n sei eine iterativ definierte Folge mit a n 1 \\frac 1 2 a n 1 und a 1 1 . Berechnen Sie unter Verwendung einer for Schleife das 1000 te Folgenglied. \"\"\" let missing code end md\"\"\" warning \"3 b \" Plotten Sie die ersten 50 Folgenglieder in einem geeignetem Koordinatensystem mitn dem `scatter ` Befehl von CairoMakie. \"\"\" let missing code end md\"\"\" warning \"3 c \" Untersuchen Sie die Folge a n numerisch. Gegeben sei ein \\epsilon 0,001 . Ermitteln Sie unter Verwendung einer while Schleife ab welchem Index n \\epsilon die Differenz zwischen zwei aufeinanderfolgenden Folgengliedern kleiner als \\epsilon ist \\vert a n 1 a n \\vert \\epsilon . Geben Sie sowohl n \\epsilon , als auch a n \\epsilon aus. \"\"\" let missing code end md\"\"\" warning \"3 d \" Bestimmen Sie die ersten 50 Folgenglieder und stellen Sie den maximalen Abstand eines Folgengliedes a i zu den folgenden Folgengliedern grafisch dar \\max i,j |a i a j| , i j\\leq 50 . Nutzen Sie zur Berechnung der Folgenglieder Teilaufgabe a . \"\"\" let missing code end md\"\"\" danger \"3 e \" Zeigen Sie, dass es sich bei der in a gegebenen Folge a n n \\in \\mathbb N um eine Cauchy Folge handelt. Zeigen Sie au√üerdem unter Verwendung der Definition einer konvergierenden Folge, dass die Folge gegen den Grenzwert a 2 konvergiert. \"\"\" let missing code end md\"\"\" Aufgabe 4 Folgen, bei denen der Abstand benachbarter Folgenglieder gegen Null geht \"\"\" md\"\"\" Ein Student A beobachtet, dass bei allen bisher in der Vorlesung betrachteten konvergenten Folgen a n der Abstand benachbarter Folgenglieder gegen Null geht, d.h. \\lim n\\to\\infty |a n 1 a n| 0 gilt. Er vermutet, dass diese Eigenschaft ausreicht, um die Konvergenz der Folge gegen einen Grenzwert zu garantieren. Eine Kommilitonin Studentin B widerspricht. Wer hat recht? Beantworten Sie die Frage durch die Untersuchung der Folge. \"\"\" md\"\"\" 1, 2, 2 \\frac 1 2 , 3, 3 \\frac 1 3 , 3 \\frac 2 3 , 4, \\ldots, n \\frac 1 n , n \\frac 2 n , \\ldots, n \\frac n 1 n , n 1, \\ldots \"\"\" md\"\"\" danger \"4 a \" Schreiben Sie ein JULIA Programm, das die ersten 100 Folgenglieder dieser Folge erzeugt und ausgibt. \"\"\" let missing code end md\"\"\" danger \"4 b \" Plotten Sie die Folgenglieder in Abh√§ngigkeit des Iterationsindex. Plotten Sie zudem den Abstand zwischen benachbarten Folgengliedern in Abh√§ngigkeit des Iterationsindex. Beantworten Sie, wer recht hat und begr√ºnden Sie Ihre Antwort. \"\"\" let missing code end md\"\"\" danger \"4 c \" Beweisen Sie, dass es sich bei der Folge nicht um eine Cauchy Folge handelt. \"\"\" let missing code end "},{"url":"week_3/lecture_3/","title":"3. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 3 title \"3. Vorlesung\" tags \"lecs\" layout \"layout.jlhtml\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten CairoMakie.activate type \"svg\" end md\"\"\" Pakete die wir ben√∂tigen \"\"\" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 3. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Iteratives L√∂sen von Gleichungen Fixpunkt Iteration \"\"\" md\"\"\" Am Beispiel der Fixpunktgleichung \\cos x x . \"\"\" let Linke Seite der Fixppunktgleichung f u cos u In Julia k√∂nnen wir auch Funktionen selbst an Funktionen √ºbergeben. F√ºr eine bessere Performance und Lesbarkeit geben wir au√üerdem die Typen der Inputargumente an. function fixpoint fun Function, x Float64, œµ tol Float64 œµ œµ tol 1. x old x while œµ œµ tol x new fun x old œµ abs x new x old x old x new end return x old end Hier √ºbergeben wir der funktion fixpoint, unsere funktion f u cos u , unseren Anfangswert x, und eine Toleranz œµ tol. y fixpoint f, 0.5, 1e 5 println y println f y y plotten fig Figure resolution 700, 300 ax Axis fig 1, 1 , xticks 0 0.1 1, yticks 0 0.2 1 lines ax, 0., 1. , 0., 1. , linewidth 1, label L\"x\" lines ax, 0 0.01 1, cos. 0 0.01 1 , color black, linewidth 1, label L\"\\cos x \" vlines ax, y, color red, linewidth 1, label L\"x \\star \\cos x \\star \" axislegend position lc xlims ax, 0, 1 fig end "},{"url":"week_4/assignment_4/","title":"4. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 4 title \"4. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten end md\" Pakete die wir brauchen werden \" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 4. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 23.11.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Mittelwertberechunug \"\"\" md\"\"\" warning \"1a \" Schreiben Sie eine Funktion `mittelwert`, die ein 1D Array mit Zahlen √ºbergeben bekommt und den Mittelwert aller Zahlen zur√ºck gibt. Testen Sie Ihre Funktion an den Beispielen `arr1 5, 6, 4, 21, 6 ` und `arr2 collect 100 200 `. \"\"\" let missing code end md\"\"\" Aufgabe 2 Listige Schleifen \"\"\" md\"\"\" warning \"2a \" Erstellen Sie ein 2D Array `arr`, welches alle m√∂glichen Wertepaare bzw. 2D Punkte i, j \\in \\lbrace 0, 1, \\ldots, n \\rbrace beherbergt. Das 2D Array soll dabei aus n 1 Zeilen und n 1 Spalten bestehen also eine quadratische Matrix . In dieser Matrix sollen nicht die Wertepaare selbst, sondern gleich 2D Punkte abgespeichert werden. 2D Punkte k√∂nnen erzeugt werden durch den Befehl `Point2 i,j `, wobei `i` und `j` jeweils als x und y Koordinaten verstanden werden k√∂nnen. Z.B. bei n 1 arr \\begin bmatrix Point2 0, 0 , Point2 0, 1 \\\\ Point2 1, 0 , Point2 1, 1 \\end bmatrix Erzeugen Sie `arr` f√ºr drei verschiedene selbst gew√§hlte n , wobei 10\\leq n \\leq 100 . \"\"\" md\"\"\" hint \"Tipp Preallocating\" Erzeugen Sie zun√§chst `arr` als ein 2D Array voller Nullen mitels `arr zeros Point2, n 1, n 1 `, damit Sie anschlie√üend `arr` mit den richtigen Elementen auff√ºllen k√∂nnen verschachtelte for Schleifen . √úbrigens Man kann diese Aufgabe ebenso mit nur einer Zeile Code und dem Array Comprehension Muster l√∂sen. \"\"\" let missing code end md\"\"\" warning \"2b \" Plotten Sie die mit dem Befehl `scatter arr ` die 2D Punkte aus Aufgabe 2a . Wir ben√∂tigen dabei die Syntax ` ` da wir nicht `arr` selbst plotten m√∂chten, sondern statdessen die 2D Punkte in `arr`, man kann ` ` als \"Entpacken\" verstehen. \"\"\" let missing code end md\"\"\" warning \"2c \" F√§rben Sie die 2D Punkte `Point2 i, j ` gr√ºn, falls i\\leq j ist, andernfalls rot. Erstellen Sie hierf√ºr 2 verschiedene Arrays, eines mit Punkten `Point2 i,j ` wobei i \\leq j und ein anderes mit i j . Benutzen Sie hierf√ºr das Array Comprehension Muster mit if Bedingung. Nun k√∂nnen die beiden Arrays voller 2D Punkte wiederrum grafisch mit den `scatter ` Befehl auf einer gemeinsamen Figur dargestellt werden. Nutzen Sie die Option `color green` bzw. ` red` innerhalb von `scatter ` um die gewollten Farben zu gew√§hrleisten. \"\"\" let missing code end md\"\"\" Aufgabe 3 \"\"\" md\"\"\" F√ºr alle nat√ºrlichen Zahlen n ist n \\coloneqq 1¬∑2¬∑3¬∑\\ldots¬∑n \\prod k 1 ^ n k als das Produkt der nat√ºrlichen Zahlen von 1 bis n definiert. Au√üerdem wird das leere Produkt als 1 definiert und es gilt 0 \\coloneqq 1 . Die Fakult√§t l√§sst sich auch rekursiv definieren n \\begin cases 1,&n 0\\\\ n\\cdot n 1 ,&n 0. \\end cases \"\"\" md\"\"\" warning \"3a \" Berechnen Sie in einer for Schleife n als Produkt der ersten n nat√ºrlichen Zahlen ohne Verwendung des Julia Befehls `factorial`. Weisen Sie hierzu n au√üerhalb der Schleife verschiedene Werte ‚â• 1 zu. Geben Sie mit dem ` info` Befehl n und n aus. \"\"\" let missing code end md\"\"\" warning \"3b \" Erstellen Sie aus dem Programm von 3a eine Funktion faku, welcher eine nat√ºrliche Zahl n √ºbergeben wird und die den Wert von n ausgibt. \"\"\" let missing code end md\"\"\" danger \"3c \" Zeigen Sie mittels vollst√§ndiger Induktion, dass \\sum k 1 ^ n k ¬∑ k n 1 ‚àí 1 gilt. Nutzen Sie daf√ºr die rekursive Definition der Fakult√§t. \"\"\" md\"\"\" text \"\"\" md\"\"\" Haus aufgabe 4 Pascalsches Dreieck \"\"\" md\"\"\" warning \"4a \" Erstellen Sie das Pascalsche Dreieck von 0 bis 10, d.h. eine Matrix mit 11 Zeilen, wobei das Matrixelement in der k ten Spalte der n ten Zeile unter der Bedingung, dass k\\leq n gilt durch den Binomialkoeffizienten \\binom n 1 k 1 \\frac n 1 k 1 \\cdot n 1 k 1 gegeben ist. Die Matrixelemente a n,k mit k n sollen als 0 definiert werden. Benutzen Sie f√ºr die Berechnung von \\binom n 1 k 1 den Befehl `binomial`. \"\"\" md\"\"\" hint \"Preallocating\" Auch hier sollte man zun√§chst mittels `zeros Int64, .. ` eine Matrix ein 2D Array `arr` voller Nuller preallocaten um anschlie√üend `arr` richtig aufzuf√ºllen. \"\"\" let missing code end md\"\"\" warning \"4b \" Erstellen Sie nun eine Funktion `binom`, welche den Binomialkoeffizienten in Abh√§ngigkeit von n und k berechnet. Die Funktion `binomial` soll nun also selbst geschrieben werden. Daf√ºr kann der Befehl `factorial` verwendet werden. Testen Sie Ihre Funktion `binom` an 3 geeigneten Wertepaaren und vergleichen Sie diese mit der Ausgabe des Befehls `binomial`. \"\"\" let missing code end md\"\"\" danger \"4c \" Zeigen Sie, dass die Summe aller Zahlen in der n ten Zeile des Pascalschen Dreiecks 2^n ist. \"\"\" md\"\"\" text \"\"\" md\"\"\" Zusatz Aufgabe 5 Banachscher Fixpunktsatz \"\"\" md\"\"\" Sei g x \\sqrt 1 x eine Abbildung mit x\\in 1,2 \\subset\\mathbb R . Betrachten Sie die Iterationen x n 1 g x n mit dem Startwert x 0 1 , um numerisch einen Fixpunkt von g x zu bestimmen. Rechtfertigen Sie durch Nachpr√ºfen der Voraussetzungen des Banach'schen Fixpunktsatzes, dass die Iteration gegen einen eindeutigen Fixpunkt konvergiert \"\"\" md\"\"\" danger \"5a \" Zeigen Sie, dass die Funktion g das abgeschlossene Interval 1,2 auf sich selbst abbildet, d.h. g 1,2 \\rightarrow 1,2 . \"\"\" md\"\"\" text \"\"\" md\"\"\" danger \"5b \" Zeigen Sie, dass g k kontraktiv ist. Tipp Hier kann eine binomische Formel verwendet werden. \"\"\" md\"\"\" text \"\"\" md\"\"\" danger \"5c \" Wieviele Iterationen ben√∂tigt man um sicherzustellen, dass das Resultat einen kleineren Fehler als 10^ 3 besitzt? \"\"\" md\"\"\" text \"\"\" "},{"url":"week_4/lecture_4/","title":"4. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 4 title \"4. Vorlesung\" tags \"lecs\" layout \"layout.jlhtml\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten using Symbolics Smybolisches Berechnen using SymbolicNumericIntegration Symbolische Integration CairoMakie.activate type \"svg\" end md\"\"\" Pakete die wir ben√∂tigen \"\"\" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 4. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Mathematische Funktionen definieren und Ableitungen symbolisch berechnen \"\"\" begin syms x f x^2 4 end md\"\"\" Um den Funktionswert bei x 2 zu berechenen m√ºssen wir x entsprechend einsetzen substitute . Dies geschieht duch ein `Dictionary` indem wir mit `x 2` angeben wie x ersetzt werden soll. \"\"\" begin substitute f, Dict x 2 end md\"\"\" Die Ableitung k√∂nnen wir symbolisch ermitteln durch \"\"\" begin Dx Differential x f prime Dx f f prime expand derivatives f prime end begin substitute f prime, Dict x 1 end md\"\"\" Ebenso das unbestimmte Integral, wobei die 0 hier nur anzeigen, dass es zu keinen Fehlern beim L√∂sen des Integrals kam. Ansonsten stehen hier Terme die nicht ber√ºcksichtigt wurden. \"\"\" let integrate f end md\"\"\" Beispiel einer nichtlinearen Abbildung Logistische Gleichung \"\"\" md\"\"\" x n 1 f x n \\lambda x n 1 x n \"\"\" md\"\"\"In Abh√§ngigkeit von einem Parameter \\lambda zeigt die Logistische Gleichung Fixpunkte oder periodisches Verhalten und chaotisches Verhalten.\"\"\" function logisticmap Œª Float64, a start Float64, iters Integer x coords Float64 y coords Float64 a old a start a Float64 a old push x coords, a start push y coords, 0. for iter in 1 iters a new Œª a old 1 a old push a, a new Cobweb push x coords, a old push x coords, a old push y coords, a old push y coords, a new a old a new end Zusammenf√ºgen der Koordinaten zu einer Matrix coords hcat x coords, y coords return a, coords end md\"\"\" 1. & 2. Szenario Fixpunkt & Periodisches Verhalten \"\"\" let a1, coords1 logisticmap 2.5, 0.5, 20 a2, coords2 logisticmap 3.3, 0.5, 20 v 0. 0.01 1. CairoMakie.activate type \"svg\" fig Figure resolution 800, 800 axtleft Axis fig 1, 1 , title \"Folge der logistischen Abbildung\", xlabel L\"n\", ylabel L\"x n\" scatter axtleft, a1, label L\"\\lambda 2.5\" axislegend axtleft axtright Axis fig 1, 2 , title \"Cobweb Diagramm Logistische Abbildung\", xlabel L\"x n\", ylabel L\"f x n \" Wenn man den lines oder scatter Befehl eine Matrix √ºbergibt 2D Array hier coords, dann interpretieren die Befehle die erste Zeile als x Werte und die zweite Zeile als y Werte. lines axtright, coords1 lines axtright, 0, 1 , 0, 1 lines axtright, v, 2.5. v . 1 . v axbleft Axis fig 2, 1 , xlabel L\"n\", ylabel L\"x n\" scatter axbleft, a2, label L\"\\lambda 3.3\" axislegend axbleft, position rc axbright Axis fig 2, 2 , xlabel L\"x n\", ylabel L\"f x n \" lines axbright, coords2 lines axbright, 0, 1 , 0, 1 lines axbright, v, 3.3. v . 1 . v fig end md\"\"\" 3. Szenario Chaotisches Verhalten \"\"\" let a1, coords1 logisticmap 3.7, 0.5, 20 v 0. 0.01 1. CairoMakie.activate type \"svg\" fig Figure resolution 800, 400 axtleft Axis fig 1, 1 , title \"Folge der logistischen Abbildung\", xlabel L\"n\", ylabel L\"x n\" scatter axtleft, a1, label L\"\\lambda 3.7\" axislegend axtleft axtright Axis fig 1, 2 , title \"Cobweb Diagramm Logistische Abbildung\", xlabel L\"x n\", ylabel L\"f x n \" lines axtright, coords1 lines axtright, 0, 1 , 0, 1 lines axtright, v, 2.5. v . 1 . v fig end md\"\"\" Zusammenfassung der Szenarien in einen Bifurkationsdiagramm \"\"\" let function logisticmap Œª Float64, a start Float64, iters Integer a old a start a Float64 a old for iter in 1 iters a new Œª a old 1 a old push a, a new a old a new end return a end function bifurcation logisticmap Œª start Float64, Œª end Float64, a start Float64, n trans Integer, n iter Integer Da wir die Gr√∂√üe der Ausgangsarrays schon kennen, empfiehlt es sich diese schon vorab zu initialisieren. Dies f√∂rdert die Performance ŒîŒª 0.005 dim Œª ceil Int64, Œª end Œª start ŒîŒª 1 dim R n iter n trans 1 results zeros Float64, dim Œª, dim R Œªs zeros Float64, dim Œª, dim R In Julia k√∂nnen wir mittels enumerate arr gleichzeitg √ºber Indizes und Elemente des arr iterieren. Wir \"nummerieren\" das Array √ºber das wir iterieren for idx, Œª in enumerate Œª start ŒîŒª Œª end result logisticmap Œª, a start, n iter res steady result n trans 1 end results idx, . res steady Œªs idx, . Œª . ones length res steady end return results, Œªs end R, Œõ bifurcation logisticmap 2.2, 4., 0.5, 500, 1000 Aus unseren Matrizen konstruieren wir nun 2D Punkte. Diese Punkte speichern wir dann in einen Array points. In Julia kurz und b√ºndig points Point2 Œõ idx , R idx for idx in eachindex R da Vektorgrafiken bei so vielen Punkten sehr gro√ü werden, w√§hlen wir \"png\" als Output CairoMakie.activate type \"png\" fig Figure resolution 1000, 800 , fontsize 24 ax Axis fig 1, 1 , xlabel L\"\\lambda\", ylabel L\"x \\star \" scatter ax, points, markersize 3 fig end "},{"url":"week_5/assignment_5/","title":"5. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 5 title \"5. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten using ForwardDiff using Symbolics end html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 5. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 30.11.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Die logistische Abbildung \"\"\" md\"\"\" Es soll die Abbildung f \\mathbb R \\rightarrow \\mathbb R mit f x \\lambda x 1 x und \\lambda\\in 1, 4 iterativ angewendet werden. \"\"\" md\"\"\" warning \"1a \" Errechnen Sie analytisch per Hand die Fixpunkte x der Abbildung f , d.h. L√∂sungen von x f x . \"\"\" md\"\"\" text \"\"\" md\"\"\" danger \"1b \" Berechnen Sie die Funktion f x und die Ableitung von f x in der Umgebung von x 1 \\frac 1 \\lambda , d.h. an den Stellen x 1 \\frac 1 \\lambda \\delta , wobei \\delta sowohl positive als auch negative Werte annehmen kann. \"\"\" md\"\"\" text \"\"\" md\"\"\" danger \"1c \" Die iterative Anwendung der Abbildung f konvergiert unter geeigneten Bedinungen gegen den Fixpunkt x 1 \\frac 1 \\lambda . Zeigen Sie diese Konvergenz f√ºr den Spezialfall \\lambda 2 . W√§hlen Sie hier f√ºr die Startwerte x 0 nahe genug am Fixpunkt und verwenden Sie einen in der Vorlesung behandelten Satz. \"\"\" md\"\"\" test \"\"\" md\"\"\" warning \"1d \" Zeigen Sie durch ein Beispiel, dass sich die ersten 3 iterativ berechneten Werte x 1 , x 2 und x 3 mit dem Startwert x 0 0.75 und \\lambda 3.4 vom Fixpunkt wegbewegen. \"\"\" let missing code end md\"\"\" danger \"1e \" Welche Schlussfolgerung kann aus b d erhalten werden? Wie kann dies bewiesen werden? \"\"\" md\"\"\" text \"\"\" md\"\"\" danger \"1e \" Zeigen Sie, dass f√ºr \\lambda 3.4 und Startwerte x 0\\in 0,1 die zweifache Hintereinanderausf√ºhrung der Abbildung f , d.h. die Abbildung g x f f x einen Fixpunkt besitzt gegen den die iterative Anwendung der Abbildung g konvergiert. Man nennt dies einen stabilen Grenzzyklus mit Periode 2. \"\"\" md\"\"\" text \"\"\" md\"\"\" Aufgabe 2 \"\"\" md\"\"\" Es soll eine Nullstelle der Funktion f \\mathbb R \\rightarrow \\mathbb R , x\\mapsto f x und f x x^3 2x^2 x 1 numerisch im Intervall 2,0 ermittelt werden. Berechnen Sie die ersten 8 Iterierten des Newton Verfahrens mit dem Startwert x 0 0 . Implementieren Sie dazu das Newton Verfahren. Das Programm soll dabei den Startwert x 0 , eine Funktion z.B. f x und die Anzahl der durchzuf√ºhrenden Iterationsschritte einlesen. Eine Bestimmung von Ableitungen soll mit Hilfe von dem Paket \"ForwardDiff\" erfolgen oder an das Computerprogramm √ºbergeben werden. \"\"\" md\"\"\" Zusatz aufgabe 3 Steffensen Verfahren \"\"\" md\"\"\" Das Steffensen Verfahren zur Nullstellenberechnung der Funktion f x ist definiert durch die Iteration \"\"\" md\"\"\" x n 1 x n \\frac f x n ^2 f x n f \\left x n f x n \\right , \\ \\ n \\in \\mathbb N 0. \"\"\" md\"\"\" und ben√∂tigt keine Ableitungen. \"\"\" md\"\"\" danger \"3a \" Erstellen Sie eine Julia Funktion zur Durchf√ºhrung dieses Verfahrens. Die Julia Funktion soll dabei einen Startwert x 0 , eine Funktion und die Anzahl der durchzuf√ºhrenden Iterationsschritte einlesen. \"\"\" let missing code end md\"\"\" danger \"3b \" Bestimmen Sie einmal mittels des Newton und einmal mittels des Steffensen Verfahren die Approximation der Nullstelle der Funktion f x x^2 1 mit Startwert x 0 1.5 nach 10 Iterationsschritten. Speichern Sie die Ergebnisse nach jedem Iterationsschritt mit Hilfe einer Zeilenmatrix und stellen Sie diese anschlie√üend graphisch dar. Beachten Sie hierbei, auch den Startwert abzubilden. \"\"\" let missing code end md\"\"\" danger \"3c \" F√ºhren Sie Aufgabe b auch f√ºr die Funktion f x 38x^3 1 durch, mit Startwert x 0 2 nach 5 Iterationsschritten. Vergleichen Sie Ihr Ergebnis mit dem aus Aufgabenteil b . Was stellen Sie fest? \"\"\" let missing code end md\"\"\" Haus aufgabe 4 Miniprojekt \"\"\" md\"\"\" Ableitungsberechnung f\\\"ur eine Funktion mit einer Variablen. Gegeben sei die Funktion f x \\frac 1 2 x^3 x^2 1 . \"\"\" md\"\"\" warning \"4a \" Plotten Sie die Funktion f x in einem sinnvollen Bereich. \"\"\" let missing code end md\"\"\" warning \"4b \" Berechnen Sie die ersten zwei Ableitungen von f x symbolisch mit dem Package \"Symbolics\" und plotten Sie diese in das Schaubild aus a . \"\"\" let missing code end md\"\"\" warning \"4c \" Berechnen Sie mit der Definition der Ableitung als Grenzwert eines Differenzenquotienten die erste Ableitung von f x an der Stelle x 0 1 . Formulieren Sie hierzu den Differenzenquotient und berechnen Sie anschlie√üend den Grenzwert analytisch. \"\"\" md\"\"\" test \"\"\" md\"\"\" warning \"4d \" Bestimmen Sie die Nullstellen und die kritischen Punkte von f x numerisch mit den Newton Verfahren ein Punkt x\\in \\mathbb R hei√üt kritischer Punkt einer differenzierbaren Funktion f \\mathbb R \\to \\mathbb R , wenn f' x 0 gilt . \"\"\" let missing code end md\"\"\" warning \"4e \" Bestimmen Sie den Typ der kritischen Punkte und zeichnen Sie die Punkte zusammen mit dem Graph der Funktion in ein Koordinatensystem ein gilt f√ºr einen kritischen Punkt x\\in \\mathbb R einer zweimal differenzierbaren Funktion f \\mathbb R \\to \\mathbb R die Ungleichung f'' x 0 bzw. f'' x 0 , so besitzt f an der Stelle x ein lokales Minimum bzw. Maximum . Zusatz Lokale Maxima sollen rot, lokale Minima blau dargestellt werden. \"\"\" let missing code end "},{"url":"week_5/lecture_5/","title":"5. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 5 title \"5. Vorlesung\" tags \"lecs\" layout \"layout.jlhtml\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten using Symbolics, ForwardDiff symbolisches diffe end html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 5. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Die Newton Methode \"\"\" md\"\"\" Die Newton Methode ist ein Verfahren zum L√∂sen eines Nullstellenproblems. Nachfolgend werden wir L√∂sungen f√ºr 2 x^2 suchen. Dazu wird das Problem in das Nullstellenproblem 0 x^2 2 umgeformt. Ganz allgemein sucht man immer x \\star wobei h x \\star 0 gilt. \"\"\" md\"\"\" Die Iteration der Newton Methode lautet x n 1 x n \\frac h x n h^\\prime x n man ben√∂tigt also Informationen √ºber die Ableitung der Funktion h x . In unseren Fall gilt h x x^2 2, \\quad h^\\prime x 2x Au√üerdem ben√∂tigt man einen Anfangswert x 0 , hier setzen wir x 0 1 . Somit k√∂nnen wir bereits nach x \\star suchen. \"\"\" let h x x^2 2 h‚Ä≤ x 2x ‚Ä≤ \\prime TAB x 1. for iter in 1 5 x x h x h‚Ä≤ x end info \"x ist x , und somit das Quadrat von x x^2 \" end md\"\"\" Zum Vergleich die analytische L√∂sung \"\"\" sqrt 2 md\"\"\" Eventuell ist es hilfreich das Newton Verfahren zu visualisieren, da die Methode leicht geometrisch zu verstehen ist. \"\"\" let CairoMakie.activate type \"svg\" h x x^2 2 h‚Ä≤ x 2x ‚Ä≤ \\prime TAB x collect 0 0.1 4 x old 3.9 points Point2 fig Figure fontsize 23 ax Axis fig 1, 1 , xlabel L\"x\", ylabel L\"f x \" hlines ax, 0, color black lines ax, x, h. x , label L\"h x \", linewidth 3 for iter in 1 5 x new x old h x old h‚Ä≤ x old push points, Point2 x old, 0 push points, Point2 x old, h x old x old x new end scatter ax, points 1 2 end , color green, label L\"x n\" scatter ax, points 2 2 end , color red, label L\"h x n \" lines ax, points , label \"Newton Pfad\" axislegend position lt, nbanks 4 ylims ax, 1.5, 15 xlims ax, 1, 4 fig end md\"\"\" Man bildet also die Tangente an h x n und schaut sich dann die Nullstelle der Tangente an. Die dann abermals als Ausgangspunkt f√ºr die n√§chste Iteration genutzt wird. Die Anfangsbedingung ist entscheidend, man kann zum Beispiel auch im negativen Bereich anfangen \"\"\" let h x x^2 2 h‚Ä≤ x 2x ‚Ä≤ \\prime TAB x collect 4 0.1 0 x old 3.9 points Point2 fig Figure fontsize 23 ax Axis fig 1, 1 , xlabel L\"x\", ylabel L\"f x \" hlines ax, 0, color black lines ax, x, h. x , label L\"h x \", linewidth 3 for iter in 1 5 x new x old h x old h‚Ä≤ x old push points, Point2 x old, 0 push points, Point2 x old, h x old x old x new end scatter ax, points 1 2 end , color green, label L\"x n\" scatter ax, points 2 2 end , color red, label L\"h x n \" lines ax, points , label \"Newton Pfad\" axislegend position rt, nbanks 4 ylims ax, 1.5, 15 xlims ax, 4, 1 fig end md\"\"\" und landet somit bei der zweiten L√∂sung \\sqrt 2 . \"\"\" md\"\"\" Newton mit Abbruchbedingung \"\"\" let h x x^2 2 h‚Ä≤ x 2x ‚Ä≤ \\prime TAB x 1. iter 0 while abs 2 x^2 1e 7 iter 1 x x h x h‚Ä≤ x end info \"x ist x und wir brauchten iter Iterationen.\" end md\"\"\" Newton Methode mit symbolischen Differenzieren \"\"\" md\"\"\" Nun wollen wir eine Funktion `newtonmethod` schreiben, der wir unsere Funktion √ºbergeben, dessen Nullstelle wir suchen, eine geforderte Toleranz und einen Startwert. Damit wir nicht durcheinander kommen, k√∂nnen wir in der Methode angeben, von welchen Typ die Eingabewerte sind. Dies geschieht durch den ` ` Operator. \"Typing\" hat im Allgemeinen nicht nur leserliche Gr√ºnde sondern f√∂rdert auch die Performance. \"\"\" function newtonmethod h Function, tol Float64, x0 Float64 h‚Ä≤ x ForwardDiff.derivative h, x Ausrechnen der Ableitung x new x0 x old x0 tol 1 damit nicht sofort while Schleife erf√ºllt wird while abs x old x new tol x old x new x new x old h x old h‚Ä≤ x old end return x new end let x star newtonmethod x x^2 2, 1e 8, 1. info \"x ist x star und x^2 ist somit x star^2 \" end md\"\"\" Jetzt k√∂nnen wir uns beliebige Probleme ausdenken. Z.B. das altbekannte Problem x \\cos x , welches wir zuvor mit einer Fixpunktiteration gel√∂√üt haben. \"\"\" let x star newtonmethod x cos x x, 1e 8, 0.5 info \"x ist x star und cos x ist cos x star \" end "},{"url":"week_6/assignment_6/","title":"6. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 6 title \"6. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie using Symbolics end md\" Pakete die wir brauchen werden \" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 6. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 07.12.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Wiederholung Ableitungen \"\"\" md\"\"\" warning \"1a \" Bilden Sie mit dem Package \"Symbolics\" die erste, zweite und dritte Ableitung von f x \\arctan x g x x\\sin x \"\"\" let missing code end md\"\"\" warning \"1b \" Plotten Sie die Funktionen in einer Figur mit zwei Koordinatensystemem. In den Koordinatensystemen sollen jeweils f x und g x und deren erste bis dritte Ableitung eingezeichnet werden. Nutzen Sie verschiedene `color` und `linestyle` Optionen. \"\"\" let missing code end md\"\"\" Aufgabe 2 Bisektions Algorithmus \"\"\" md\"\"\" Ist f auf \\left a,b\\right \\subseteq D stetig und gilt f a f b 0 , so besitzt f im Intervall a, b mindestens eine Nullstelle. \"\"\" md\"\"\" warning \"2a \" Machen Sie sich mit der Kontrollstruktur `if else end` vertraut und schreiben Sie eine Funktion `bisec` zur Anwendung des Bisektionsalgorithmus auf f x x^5 x 1 im Intervall a,b 0,1 zur n√§herungsweisen Bestimmung einer Nullstelle x . \"\"\" md\"\"\" hint \"Pseudocode Bisection\" Initialisierung x 1 a \\, x 2 b \\, f 1 f x 1 \\, f 2 f x 2 \\, \\varepsilon 10^ 3 . Pr√ºfung der Existenz einer Nullstelle f 1\\cdot f 2 0 Iteration Berechnung der Intervallmitte x M x 1 x 2 2. Berechnung des Funktionswertes f M f x M . Festlegung des neuen Intervalls Falls f M f 2 0 d.h. Nullstelle zwischen x M und x 2 , dann x 1 x M und f 1 f M, Falls f M f 2 0 d.h. Nullstelle zwischen x 1 und x M , dann x 2 x M und f 2 f M. Abbruchbedingung Falls |x 1 x 2| epsilon, dann x x M, STOP. Falls |x 1 x 2| epsilon, dann weiter mit Iteration. \"\"\" let missing code end md\"\"\" warning \"2b \" Plotten Sie die Funktion mit dem CairoMakie Package und markieren Sie die berechnete Nullstelle. \"\"\" let missing code end md\"\"\" danger \"2c \" Stellen Sie die Funktionsweise des Algorithmus graphisch dar. Erweitern Sie daf√ºr die Funktion `bisec`, sodass Sie jeden berechneten Funktionswert mit zugeh√∂rigem x Wert speichern. Tragen Sie anschlie√üend die Punkte in einen Koordinatensystem ein. \"\"\" let missing code end md\"\"\" Haus aufgabe 3 \"\"\" md\"\"\" Die Kosinus Funktion kann mit einem Taylor Polynom p 2n \\sum k 0 ^ n 1 ^ k \\frac x^ 2k 2k in einer Umgebung von x 0 approximiert werden, d.h. es gilt p 2n \\approx \\cos x . \"\"\" md\"\"\" warning \"3a \" Implementieren Sie die Berechnung des Taylor Polynoms der Kosinus Funktion als Funktion bis zur 20. Ordnung, also bis n 10 . \"\"\" let missing code end md\"\"\" warning \"3b \" Testen Sie Ihr Programm f√ºr die Werte x \\in \\lbrace 0, œÄ 2, œÄ \\rbrace . \"\"\" let missing code end md\"\"\" warning \"3c \" Erstellen Sie jeweils ein Gitter G \\ r k\\in \\mathbb R | r k a k\\cdot h, 0\\leq k\\leq N 1\\ also ein 1D Array im Intervall a,b 5,5 mit der Schrittweite h \\frac b a N 1 , wobei N die Anzahl der Gitterpunkte ist. F√ºhren Sie die Untersuchungen mit den Schrittweiten h 1 und h 0.1 durch. Werten Sie die Funktion des Taylor Polynoms der Kosinus Funktion an den Gitterpunkten aus. Speichern Sie die Ergebnisse in geeigneter Form. \"\"\" let missing code end md\"\"\" warning \"3d \" Plotten Sie in einem gemeinsamen Koordinatensystem die approximativen Ergebnisse aus Teilaufgabe c im Vergleich zur Funktion \\cos x . Begr√ºnden Sie, welche Wahl der Schrittweite am geeignetsten ist. \"\"\" let missing code end "},{"url":"week_6/lecture_6/","title":"6. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 6 title \"6. Vorlesung\" tags \"lecs\" layout \"layout.jlhtml\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten using Symbolics Symybolisches Berechnen using TaylorSeries Symbolische Taylorreihe CairoMakie.activate type \"svg\" end md\"\"\" Pakete die wir ben√∂tigen \"\"\" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 6. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Taylor Polynome \"\"\" md\"\"\" F√ºr das Erstellen von Taylor Polynomen nutzen wir das Package \"TaylorSeries\". Dabei legen wir fest in welcher Variable wir eine Taylorapproximation durchf√ºhren wollen und bis zur welcher Ordnung. \"\"\" t Taylor1 3 md\"\"\" Hier legen wir mit dem Befehl `Taylor1` fest, dass wir eine eindimensionale Taylorreihe in der Variablen `t` bis zur dritten Ordnung vollf√ºhren m√∂chten. Grunds√§tzlich wird die Reihe immer an t 0 0 entwickelt. \"\"\" md\"\"\" Beispiel Taylorentwicklung von \\exp x \"\"\" z1 exp t md\"\"\" Um die Koeffizienten als 1D Array zu bekommen, nutzt man \"\"\" z1.coeffs md\"\"\" Man kann unsere Approximation bzw. Reihe `z1` nun auch an anderen Stellen auswerten \"\"\" z1 1 md\"\"\" Dieser weicht nat√ºrlich vom analytischen Wert \"\"\" exp 1 md\"\"\" ab. Um eine Taylorreihe der Exponentialfunktion an t 0 1 zu entwickeln, nutzen wir einfach \"\"\" z2 exp t 1 z2.coeffs z2 0 exp 1 md\"\"\" Kritische Punkte \"\"\" md\"\"\" Der Punkt x 0 wird kritischer Punkt von f genannt, wenn \\mathrm D \\vert x x 0 f 0 gilt. Also die erste Ableitung von f x nach x , an der Stelle x x 0 null ist. Wir nutzen die Schulnotation f^ \\prime x 0 0 \"\"\" md\"\"\" Wenn f^ \\prime\\prime x 0 0 , so ist x 0 ein lokales Maximum von f . Wenn f^ \\prime\\prime x 0 0 , so ist x 0 ein lokales Minimum von f . Wenn f^ \\prime\\prime x 0 0 , so ist x 0 , so kann mit den vorliegenden Informationen keine Schlussfolgerung gezogen werden. \"\"\" md\"\"\" Beispiel \"\"\" begin syms x f 1 3 x^3 x end x arr collect 2 0.01 2 y arr substitute f, Dict x x elem for x elem in x arr let fig Figure ax Axis fig 1, 1 , xlabel L\"x\", ylabel L\"y\" lines ax, x arr, y arr fig end D Differential x f prime D f f prime expanded expand derivatives f prime md\"\"\" Die kritischen Punkte sind somit x 0 1 und x 1 1 . \"\"\" f prime prime expand derivatives D D f substitute f prime prime, Dict x 1 md\"\"\" negativ, also ein lokales Maximum \"\"\" substitute f prime prime, Dict x 1 md\"\"\" positiv, also ein lokales Minumum \"\"\" md\"\"\" Taylorreihe \"\"\" i Taylor1 2 g u 1 3 u^3 u md\"\"\" Taylorreihe entwickelt an x 0 1 \"\"\" tl1 g i 1 md\"\"\" Taylorreihe entwickelt an x 0 1 \"\"\" tl2 g i 1 begin fig Figure x arr all collect 2 0.05 2 x arr neg collect 2 0.05 0 x arr pos collect 0 0.05 2 ax Axis fig 1, 1 lines ax, x arr all, g. x arr all , label L\"f x \" lines ax, x arr pos, tl1. x arr pos . 1 , linestyle dash, linewidth 4, label L\"Taylor, x 0 1\" lines ax, x arr neg, tl2. x arr neg . 1 , linestyle dash, linewidth 4, label L\"Taylor, x 0 1\" axislegend fig end md\"\"\" Bisektionsalgorithmus zur Nullstellenberechnung \"\"\" function bisection a Real, b Real, œµ tol Real, f Function Ausgabe einer Fehlermeldung bei ung√ºltigen Grenzen assert f a f b 0. \"f a f b 0\" low a up b while up low œµ tol mid low up 2 if f low f mid 0 low mid else up mid end end return low up 2 end md\"\"\" Beispiel \"\"\" let v x cos x x x star bisection 2, 3, 1e 6, v end "},{"url":"week_7/assignment_7/","title":"7. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 7 title \"7. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie using Symbolics using Elliptic end html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 7. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 14.12.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Numerische Integration Trapezregel \"\"\" md\"\"\" F√ºr eine Funktion f a, b \\to \\mathbb R und n \\in \\mathbb N wird die Trapezsumme T n \\frac h 2 \\left f a f b 2 \\sum k 1 ^ n 1 f a k\\cdot h \\right gebildet, die eien N√§herung f√ºr das Integral \\int a ^ b f x dx darstellt. \"\"\" md\"\"\" warning \"1a \" Schreiben Sie eine Funktion, die f,a, b und n einliest und T n berechnet. \"\"\" missing code md\"\"\" warning \"1b \" Testen Sie Ihre Funktion anhand von f 0,1 \\to \\mathbb R , wobei f x x^2 und n 1, 2, \\ldots, 10 . Vergleichen Sie Ihre Ergebnnisse mit dem analytischen Ergebnis von \\int 0 ^ 1 x^2 dx . Was passiert, wenn n immer gr√∂√üer wird? \"\"\" let missing code end md\"\"\" Aufgabe 2 Numerische Intregration numerische Fehler \"\"\" md\"\"\" Betrachten Sie das Integral \\int 0^5 \\sqrt 1 \\cos^2 x dx . \"\"\" md\"\"\" warning \"2a \" Nutzen Sie die Funktion aus Aufgabe 1, die das gegebene Integral n√§herungsweise mit Hilfe der Trapezsumme mit n Teilintervallen berechnet. Berechnen Sie damit die Trapezsumme als N√§herung des Integrals f√ºr n 10,11,12,13,...,99,100 und erstellen Sie ein entsprechendes 1D Array als R√ºckgabe. \"\"\" let missing code end md\"\"\" warning \"2b \" Erstellen Sie zudem ein Array, welches die absoluten Fehler der Approximationen aus Teilaufgabe a im Vergleich zum analytischen Ergebnis `analytic` setzt siehe unten . Plotten Sie die absoluten Fehler als eine Funktion von n . Wie h√§ngt der absolute Fehler von n ab? \"\"\" analytic sqrt 2 2 Elliptic.E 1 2 Elliptic.E 5 œÄ, 1 2 let missing code end md\"\"\" Aufgabe 3 Lineare Gleichungssysteme \"\"\" md\"\"\" warning \"3a \" L√∂sen Sie das lineare Gleichungssystem 2x 5y 1 5x 8y 11 mittels `Symbolics.solve for .. `. \"\"\" let syms x y missing code end md\"\"\" Haus aufgabe 4 Lineares Gleichungssystem \"\"\" md\"\"\" warning \"4 \" Herr Matheses hat drei Kinder Primus, Sekunda und Tertius. Primus sagt Wenn Sekunda dreimal so alt ist, wie ich es jetzt bin, dann sind Sekunda und ich zusammen genau 21 mal √§lter als Tertius jetzt. Sekunda sagt Ich bin so alt wie Primus war, als Tertius gerade geboren wurde. Tertius sagt Ich bin in einem Jahr genau ein Drittel mal so alt, wie Primus dann ist. Stellen Sie f√ºr jede Aussage eine entsprechende Gleichung auf und ermitteln Sie dann das Alter der drei Kinder, indem Sie das entsprechende Gleichungssystem mit `Symbolics.solve for .. ` l√∂sen. \"\"\" let missing code end md\"\"\" Haus aufgabe 5 Schaltjahre \"\"\" md\"\"\" warning \"5 \" Julius Caesar stellte seiner Zeit fest, dass eine Sonnenumrundung der Erde irgendetwas zwischen 365 und 366 Tagen in Anspruch nimmt. Mit der Einf√ºhrung des julianischen Kalenders 45 v.Chr. ber√ºcksichtigte er dies, in dem er alle 4 Jahre All jene, welche sich durch 4 teilen lassen ein sogenanntes Schaltjahr einf√ºgte. Da diese Regellung noch zu ungenau war Eine Sonnenumrundung dauert genau 365,24219 Tage , wurden mit der Einf√ºhrung des gregorianischen Kalenders 1582 folgende Regeln erg√§nzt 1. L√§sst sich das Jahr durch 4 teilen, so ist es ein Schaltjahr. 2. L√§sst es sich au√üerdem durch 100 teilen, handelt es sich jedoch um ein Gemeinjahr, bestehend aus 365 Tagen. 3. L√§sst sich ein Jahr auch noch durch 400 teilen, besteht das Jahr wieder aus 366 Tagen und ist ein Schaltjahr. Diese Regelung ist bis heute g√ºltig. Schreiben Sie eine Funktion ‚Äúleap year‚Äù, welche f√ºr ein eingegebenes Jahr ermittelt, ob es ein Schaltjahr war, bzw. sein wird. Testen Sie ihre Prozedur an folgenden Jahren 2018, 2016, 2000, 1900, 2100, 1500, 1203, 1204, 100 v.Chr. Beachten Sie, dass die Regelungen sich √ºber die Jahrhunderte ver√§ndert haben. Stellen Sie sicher, dass die Ausgaben auf der Abgabe vorhanden sind. \"\"\" let missing code end "},{"url":"week_7/lecture_7/","title":"7. Vorlesung","tags":["lecs"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 7 title \"7. Vorlesung\" tags \"lecs\" layout \"layout.jlhtml\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie zum Plotten CairoMakie.activate type \"svg\" end md\"\"\" Pakete die wir ben√∂tigen \"\"\" html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 7. Vorlesung in Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke √úbersetzung des Codes M.Sc. H. Wallner \"\"\" md\"\"\" Differentialgleichungen DGL \"\"\" md\"\"\" In dieser Vorlesung ging es darum eine gew√∂hnliche Differentialgleichung der Form \\frac \\mathrm d \\mathrm d t x f x mit dem Anfangswert x t 0 x 0 numerisch zu l√∂sen, d.h. wir suchen die L√∂sung x t numerisch. Pr√§zise wurde hierf√ºr die Euler Vorw√§rts Methode eingef√ºhrt engl. euler forward . Sie ist nur eine von vielen eine besonders einfache Interagrationsschema. \"\"\" begin \"\"\" Dies ist ein Docstring und dient zur Dokumentation von Funktionen in Projekten t 0 Anfangszeit, t 1 Endzeit, x 0 Anfangswert, f rechte Seite der DGL eine Funktion , Œît Schrittweite der Eulermethode \"\"\" function euler forward t 0 Float64, t 1 Float64, x 0 Float64, f Function, Œît Float64 x new x 0 t new t 0 sol x Float64 x 0 Array f√ºr x, wo schon das erste Element x 0 drinne steht sol t Float64 t 0 while t new t 1 t new t new Œît x old x new x new x old Œît f x old push sol t, t new push sol x, x new end return sol x, sol t end end md\"\"\" Beispiel f x 2x \"\"\" let hier √ºbergeben wir wir der Funktion euler forward die Funktion f x 2x mit der Schreibweise x 2 x x arr, t arr euler forward 0., 5., 1., x 2 x, 0.1 fig Figure ax Axis fig 1, 1 , xlabel L\"t\", ylabel L\"x t \" scatterlines ax, t arr, x arr fig end md\"\"\" danger \"Schrittweite\" Die Schrittweite \\Delta t ist entscheidend und sollte nicht zu gro√ü gew√§hlt werden. \"\"\" md\"\"\" Beispiel g x 3x \"\"\" let x arr, t arr euler forward 0., 10., 1., x 3 x, 0.1 fig Figure ax Axis fig 1, 1 , xlabel L\"t\", ylabel L\"x t \" scatterlines ax, t arr, x arr fig end md\"\"\" Beispiele Œît deutlich zu gro√ü \"\"\" let x arr, t arr euler forward 0., 10., 1., x 3 x, 0.5 fig Figure ax Axis fig 1, 1 , xlabel L\"t\", ylabel L\"x t \" scatterlines ax, t arr, x arr fig end let x arr, t arr euler forward 0., 10., 1., x 3 x, 1. fig Figure ax Axis fig 1, 1 , xlabel L\"t\", ylabel L\"x t \" scatterlines ax, t arr, x arr fig end md\"\"\" Das SIR Modell \"\"\" function sir x Array Float64 , b Float64 1., k Float64 0.2 s b x 1 x 2 i b x 1 x 2 k x 2 r k x 2 return s, i, r end md\"\"\" Als n√§chstes m√ºssen wir unseren Euler forward ein wenig anpassen, sodass auch h√∂herdimensionale Funktionen ber√ºcksichtigt werden. \"\"\" begin \"\"\" Dies ist ein Docstring und dient zur Dokumentation von Funktionen in Projekten t 0 Anfangszeit, t 1 Endzeit, x 0 Anfangswert, f rechte Seite der DGL eine Funktion , Œît Schrittweite der Eulermethode \"\"\" function euler forward vec t 0 Float64, t 1 Float64, x 0 Array Float64 , f Function, Œît Float64 x new x 0 t new t 0 sol x x 0 Array f√ºr x, wo schon das erste Element x 0 drinne steht sol t Float64 t 0 while t new t 1 t new t new Œît x old x new x new x old . Œît . f x old push sol t, t new sol x hcat sol x, x new end return sol x, sol t end end let t 0 0. t 1 15. x 0 0.9, 0.1, 0. Œît 0.1 sol arr v, sol t s euler forward vec t 0, t 1, x 0, sir, Œît fig Figure ax Axis fig 1, 1 , xlabel L\"t\", ylabel \"Anteile der Bev√∂lkerung\" scatterlines ax, sol t s, sol arr v 1, , label \"Anf√§llig\" scatterlines ax, sol t s, sol arr v 2, , label \"Infiziert\" scatterlines ax, sol t s, sol arr v 3, , label \"Recovered\" axislegend position rc fig end md\"\"\" Zur √úberpr√ºfung, schauen wir ob die Gesamtbev√∂lkerung tats√§chlich eine Erhaltungsgr√∂√üe ist. \"\"\" let t 0 0. t 1 15. x 0 0.9, 0.1, 0. Œît 0.1 sol arr v, sol t s euler forward vec t 0, t 1, x 0, sir, Œît fig Figure ax Axis fig 1, 1 , ylabel \"Abweichung von 1\" scatterlines ax, sol t s, ones length sol t s sol arr v 1, sol arr v 2, sol arr v 3, fig end "},{"url":"week_8/assignment_8/","title":"8. Aufgabenblatt","tags":["assignments"],"text":" A Pluto.jl notebook v0.19.26 frontmatter order 8 title \"8. Aufgabenblatt\" layout \"layout.jlhtml\" tags \"assignments\" description \"\" using Markdown using InteractiveUtils begin using CairoMakie using LinearAlgebra using RowEchelon end html\"\"\" h1 style \"text align center\" Computerorientierte Mathematik, Algorithmen & Strukturen h1 div style \"text align center\" p style \"font weight bold font size 35px font variant small caps margin 0px\" 8. Aufgabenblatt f√ºr Julia p p style \"font size 20px \" Universit√§t Rostock, Institut f√ºr Mathematik, Winter 2023 24 br p div \"\"\" md\"\"\" Vorlesung Prof. J. Starke Praktika M. Barthel, G.A. Pontow, C. R√∂nnfeld, M.Sc. N. Kruse & M.Sc. H. Wallner \"\"\" md\"\"\" Abgabe bis 21.12.2023 1800 Uhr auf StudIP im \"Aufgaben\" Men√º der Vorlesung. \"\"\" md\"\"\" correct \"Person\" √Ñndern Sie in der unteren Zelle `Max Mustermann` zu Ihren Namen ebenfalls Matrikelnummer `1234` sowie `Studiumsfach` √§ndern und dr√ºcken Sie anschlie√üend `shift` `enter` zum Ausf√ºhren der Zelle. Nun sollte sich oben alles angepasst haben. \"\"\" student Dict \"name\" \"Max Mustermann\", \"fach\" \"Studiumsfach\", \"matrikelnr\" \"1234\" md\"\"\" Autor der Abgabe student \"name\" , MNR student \"matrikelnr\" , Fach student \"fach\" \"\"\" md\"\"\" Aufgabe 1 Fehlersuche Euler \"\"\" md\"\"\" Beim menschlichen Darmbakterium wurde unter Idealbedingungen eine Wachstumgsrate von \\lambda 2 pro Stunde beobachtet dies entspricht einer ungef√§hren Verdopplung der Bakterienanzahl alle 20 . Gegeben seien die Folgenden Aufgaben, mit einer entsprechend fehlerhaften L√∂sung eulerforward fehler . Finden Sie die Fehler, sodass die Funktion gem√§√ü der Aufgabenstellung funktioniert. \"\"\" function eulerforward fehler t0, tn, x0, f, Delta xnew x0 tnew t0 solx Float64 x0 solt Float64 t0 while tnew tn xold xnew xnew xold 0.5 Delta f xold tnew tnew Deltat push solt, tnew push solt, xnew end return solt, solx end md\"\"\" warning \"1a \" Implementieren Sie als Funktion in Julia die Euler Vorw√§rts Metode zur numerischen L√∂sung Integration einer gew√∂hlichen Differenzialgleichung in einer Dimension, also x t k 1 x t k \\Delta t f t k, x t k , \\qquad k 0, \\ldots, n 1 ausgehend von der Startzeit t 0 bis zur Zeit t n . Das Anfangswertproblem ist durch \\frac \\mathrm d \\mathrm d t x t f x t mit t\\in\\mathbb R und dem Anfangswert x t 0 x 0 gegeben. Verwenden Sie den Anfangszeitpunkt t 0 und den Zeitpunkt t n , bis zu dem die numerische L√∂sung bestimmt werden soll, den Anfangswert x 0 , die Funktion f \\mathbb R \\to \\mathbb R und die Schrittweite \\Delta t als Eingaben der Funktion. \"\"\" let missing code verbesserten Code hier ein√ºgen end md\"\"\" warning \"1b \" Testen Sie Ihre Julia Funktion aus Teil a durch numerisches L√∂sen der Gleichung des Bakterienwachstums \\frac \\mathrm d \\mathrm d t x t \\lambda x 2x mit x 0 1 Bakterienkultur, t 0 0 und t n 5 , also der Anzahl der Bakterienkultur nach 5 Stunden. Vergleichen Sie dabei die Ergebnisse f√ºr die Schrittweiten \\Delta t 0.1, \\Delta t 0.01, \\Delta t 0.001 mit der analytischen L√∂sung. \"\"\" let missing code end md\"\"\" warning \"1c \" Plotten Sie alle numerische L√∂sungen und die analytische L√∂sung in ein Diagramm. \"\"\" let missing code end md\"\"\" Zusatz aufgabe 2 Frobeniusnorm \"\"\" md\"\"\" danger \"2b \" Gegeben sei die Matrix M \\begin pmatrix 1 & 0 & 1 \\\\ 4 & 5 & 6 \\\\ 1 & 4 & 2 \\end pmatrix Schreiben Sie eine Funktion `fro A,n `, welche bei Eingabe einer n\\times n Matrix A folgendes berechnet f \\sqrt \\sum\\limits i 1 ^n\\sum\\limits j 1 ^n |a ij |^2 Diese Gr√∂√üe wird auch Frobeniusnorm der Matrix A genannt. Testen Sie Ihre Funktion mit der gegebenen Matrix M . \"\"\" let missing code end md\"\"\" Aufgabe 3 L√∂sen linearer Gleichungssysteme \"\"\" md\"\"\" Gegeben sei das folgende Gleichungssystem \\begin eqnarray a b c d & & 1\\\\ a 2b 3c 4d & & 5\\\\ a 4b 9c 16d & & 25\\\\ a 8b 27c 64d & & 125\\end eqnarray \"\"\" md\"\"\" warning \"3a \" Stellen Sie die entprechende Koeffizientenmatrix und erweiterte Koeffizientenmatrix auf. \"\"\" let missing code end md\"\"\" warning \"3b \" Nutzen Sie den Befehl `rref C `, wobei `C` die erweiterte Koeffizientenmatrix ist, um das Gleichungssystem zu l√∂sen. \"\"\" let missing code end md\"\"\" warning \"3c \" Nutzen Sie den Befehl `A\\b`, wobei `A` die Koeffizientenmatrix und `b` die rechte Seite der Gleichung ist. \"\"\" let missing code end md\"\"\" Aufgabe 4 \"\"\" md\"\"\" Vertiefung von Schleifen, Funktionen und Matrixoperationen. Schreiben Sie Funktionen f√ºr die folgenden Matrix Operationen ohne Verwendung der diesbez√ºglichen vorhandenen Julia internen Funktionen. Testen Sie Ihre Funktionen an geeigneten, zuf√§llig generierten Beispielen unterschiedlicher Dimension und √ºberpr√ºfen Sie die Ergebnisse mit den entsprechenden Julia Befehlen. \"\"\" md\"\"\" warning \"4a \" Addition von zwei m\\times n Matrizen A und B mit A, B \\in \\mathbb R ^ m \\times n . Diese Addition resultiert in eine m\\times n Matrix C mit C A B und jedes Element von C ist durch c ij a ij b ij definiert. \"\"\" let missing code end md\"\"\" warning \"4b \" Multiplikation einer l\\times m Matrix mit einer m\\times n Matrix Diese Multiplikation resultiert in einer l\\times n Matrix C A \\cdot B , mit c ij \\sum\\limits k 1 ^m a ik \\cdot b kj \"\"\" let missing code end md\"\"\" Haus aufgabe 5 Gau√üsche Elimination \"\"\" md\"\"\" Implementieren Sie das Verfahren der Gau√ü Elimination mit Eingabe einer erweiterten Koeffizientenmatrix A|b mit A\\in\\mathbb R ^ m\\times n und b\\in\\mathbb R ^m und Ausgabe der L√∂sung x\\in\\mathbb R ^n des linearen Gleichungssystems Ax b . Es seien a ij die Elemente der Matrix A sowie b i und x i die Elemente der Vektoren b und x . Testen Sie ihre Implementierung mit \"\"\" md\"\"\" i . A \\begin pmatrix 1 & 1 & 1\\\\ 4 & 2 & 1\\\\ 9 & 3 & 1 \\end pmatrix \\quad\\text und \\quad b \\begin pmatrix 0 \\\\1\\\\3\\end pmatrix ii . A \\begin pmatrix 1 & 0 & 4\\\\ 1 & 2 & 2\\\\ 2 & 3 & 1 \\end pmatrix \\quad\\text und \\quad b \\begin pmatrix 3 \\\\1\\\\3\\end pmatrix . \"\"\" md\"\"\" F√ºhren Sie die folgende Schritte durch \"\"\" md\"\"\" warning \"5a \" Als Vorbereitung zur Implementierung des Verfahrens auf dem Computer berechnen Sie die L√∂sung f√ºr das Beispiel i per Hand und f√ºhren Sie dabei die einzelnen Schritte der Gau√ü Elimination sorgf√§ltig durch. \"\"\" md\"\"\" warning \"3b \" Implementieren Sie die Gau√ü Elimination in einer eigenen Julia Funktion. Lesen Sie hierzu zun√§chst eine Matrix A|b \\in\\mathbb R ^ m\\times n 1 , die erweiterte Koeffizientenmatrix, ein. \"\"\" let missing code end md\"\"\" warning \"3c \" Transformieren Sie Schritt f√ºr Schritt die erweiterte Koeffizientenmatrix in eine Trapezform. Gehen Sie daf√ºr jede Spalte von A durch, angefangen bei der ersten. Im k ten Schritt wird demnach die k te Spalte betrachtet, wobei alle Eintr√§ge unterhalb der Hauptdiagonalen zu Null werden sollen. Hierf\\\"ur wird von jeder Zeile i k die mit \\frac a ik a kk multiplizierte k te Zeile abgezogen. Dazu muss a kk \\neq 0 gelten, pr√ºfen Sie dies vorher. \"\"\" let missing code end md\"\"\" danger \"3d \" Falls a kk 0 , so m√ºssen geeignete Zeilen getauscht werden. Implementieren Sie diesen Fall. \"\"\" md\"\"\" warning \"3e \" Testen Sie die Funktion an den unter i und ii gegebenen erweiterten Koeffizientenmatrizen. \"\"\" let missing code end md\"\"\" warning \"3f \" Zur Berechnung der L√∂sung soll eine Funktion zur R√ºckw√§rtssubstitution geschrieben werden, die anschlie√üend das Ergebnis ausgibt. \"\"\" let missing code end md\"\"\" danger \"3g \" Schreiben Sie eine Funktion, die bei den Aquivalenzumformungen statt der Trapezform eine evtl. abgeschnittene Einheitsmatrix erzeugt, vorherige Ergebnisse k√∂nnen hierbei genutzt werden. Dies wird als Gau√ü Jordan Methode bezeichnet. Die L√∂sung des linearen Gleichungssystems kann dann direkt abgelesen werden. Wenn f√ºr b die kanonischen Basisvektoren verwendet werden, eignet sich die Methode auch zur spaltenweisen Berechnung der zu A Inversen Matrix A^ 1 , f√ºr die mit der Einheitsmatrix E die Beziehung A^ 1 \\cdot A A\\cdot A^ 1 E gilt. Berechnen Sie zus√§tzlich die Inversen der beiden Matrizen in i und ii , falls diese existieren. \"\"\" let missing code end "}]